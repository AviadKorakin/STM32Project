
FinalProject3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007420  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007774  08007774  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800777c  0800777c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  2000006c  080077f0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  080077f0  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020891  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e1d  00000000  00000000  00040976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c18  00000000  00000000  00044798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015bb  00000000  00000000  000463b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003042a  00000000  00000000  0004796b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203c0  00000000  00000000  00077d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00137f64  00000000  00000000  00098155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000838c  00000000  00000000  001d00bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001d8448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000006c 	.word	0x2000006c
 8000210:	00000000 	.word	0x00000000
 8000214:	080075fc 	.word	0x080075fc

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000070 	.word	0x20000070
 8000230:	080075fc 	.word	0x080075fc

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int tick, randNum, flag = 1;
int main(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005b8:	f000 fff3 	bl	80015a2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005bc:	f000 f992 	bl	80008e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c0:	f000 fbc4 	bl	8000d4c <MX_GPIO_Init>
	MX_ADC1_Init();
 80005c4:	f000 f9f4 	bl	80009b0 <MX_ADC1_Init>
	MX_ICACHE_Init();
 80005c8:	f000 fa68 	bl	8000a9c <MX_ICACHE_Init>
	MX_LPUART1_UART_Init();
 80005cc:	f000 fa7a 	bl	8000ac4 <MX_LPUART1_UART_Init>
	MX_RTC_Init();
 80005d0:	f000 fac6 	bl	8000b60 <MX_RTC_Init>
	MX_UCPD1_Init();
 80005d4:	f000 fb5c 	bl	8000c90 <MX_UCPD1_Init>
	MX_USB_PCD_Init();
 80005d8:	f000 fb90 	bl	8000cfc <MX_USB_PCD_Init>
	MX_TIM2_Init();
 80005dc:	f000 fb0a 	bl	8000bf4 <MX_TIM2_Init>
	srand(time(NULL));
 80005e0:	2000      	movs	r0, #0
 80005e2:	f006 f92f 	bl	8006844 <time>
 80005e6:	4602      	mov	r2, r0
 80005e8:	460b      	mov	r3, r1
 80005ea:	4613      	mov	r3, r2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f005 ffaf 	bl	8006550 <srand>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (flag) {
 80005f2:	4b5e      	ldr	r3, [pc, #376]	; (800076c <main+0x1b8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0fb      	beq.n	80005f2 <main+0x3e>
			randNum = rand() % 8;
 80005fa:	f005 ffd7 	bl	80065ac <rand>
 80005fe:	4603      	mov	r3, r0
 8000600:	425a      	negs	r2, r3
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	f002 0207 	and.w	r2, r2, #7
 800060a:	bf58      	it	pl
 800060c:	4253      	negpl	r3, r2
 800060e:	4a58      	ldr	r2, [pc, #352]	; (8000770 <main+0x1bc>)
 8000610:	6013      	str	r3, [r2, #0]
			switch (randNum) {
 8000612:	4b57      	ldr	r3, [pc, #348]	; (8000770 <main+0x1bc>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b07      	cmp	r3, #7
 8000618:	f200 80a2 	bhi.w	8000760 <main+0x1ac>
 800061c:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <main+0x70>)
 800061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000622:	bf00      	nop
 8000624:	08000645 	.word	0x08000645
 8000628:	08000673 	.word	0x08000673
 800062c:	08000695 	.word	0x08000695
 8000630:	080006b7 	.word	0x080006b7
 8000634:	080006d9 	.word	0x080006d9
 8000638:	080006fb 	.word	0x080006fb
 800063c:	0800071d 	.word	0x0800071d
 8000640:	0800073f 	.word	0x0800073f
			case 0: //trigger
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //BLUE 001
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	484a      	ldr	r0, [pc, #296]	; (8000774 <main+0x1c0>)
 800064c:	f002 fa8c 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2180      	movs	r1, #128	; 0x80
 8000654:	4848      	ldr	r0, [pc, #288]	; (8000778 <main+0x1c4>)
 8000656:	f002 fa87 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	4847      	ldr	r0, [pc, #284]	; (800077c <main+0x1c8>)
 8000660:	f002 fa82 	bl	8002b68 <HAL_GPIO_WritePin>
				tick = 0;
 8000664:	4b46      	ldr	r3, [pc, #280]	; (8000780 <main+0x1cc>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
				flag = 0;
 800066a:	4b40      	ldr	r3, [pc, #256]	; (800076c <main+0x1b8>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
				break;
 8000670:	e076      	b.n	8000760 <main+0x1ac>
			case 1: // example 1
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //GR 110
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	483e      	ldr	r0, [pc, #248]	; (8000774 <main+0x1c0>)
 800067a:	f002 fa75 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	483d      	ldr	r0, [pc, #244]	; (8000778 <main+0x1c4>)
 8000684:	f002 fa70 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	483b      	ldr	r0, [pc, #236]	; (800077c <main+0x1c8>)
 800068e:	f002 fa6b 	bl	8002b68 <HAL_GPIO_WritePin>
				break;
 8000692:	e065      	b.n	8000760 <main+0x1ac>
			case 2: //2
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //R 100
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069a:	4836      	ldr	r0, [pc, #216]	; (8000774 <main+0x1c0>)
 800069c:	f002 fa64 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	4834      	ldr	r0, [pc, #208]	; (8000778 <main+0x1c4>)
 80006a6:	f002 fa5f 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	4833      	ldr	r0, [pc, #204]	; (800077c <main+0x1c8>)
 80006b0:	f002 fa5a 	bl	8002b68 <HAL_GPIO_WritePin>
				break;
 80006b4:	e054      	b.n	8000760 <main+0x1ac>
			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //RB 101
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006bc:	482d      	ldr	r0, [pc, #180]	; (8000774 <main+0x1c0>)
 80006be:	f002 fa53 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	482c      	ldr	r0, [pc, #176]	; (8000778 <main+0x1c4>)
 80006c8:	f002 fa4e 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	482a      	ldr	r0, [pc, #168]	; (800077c <main+0x1c8>)
 80006d2:	f002 fa49 	bl	8002b68 <HAL_GPIO_WritePin>
				break;
 80006d6:	e043      	b.n	8000760 <main+0x1ac>
			case 4:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //RGB 111
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	4827      	ldr	r0, [pc, #156]	; (800077c <main+0x1c8>)
 80006de:	f002 fa43 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e8:	4822      	ldr	r0, [pc, #136]	; (8000774 <main+0x1c0>)
 80006ea:	f002 fa3d 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	4821      	ldr	r0, [pc, #132]	; (8000778 <main+0x1c4>)
 80006f4:	f002 fa38 	bl	8002b68 <HAL_GPIO_WritePin>
				break;
 80006f8:	e032      	b.n	8000760 <main+0x1ac>
			case 5:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //NULL 000
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000700:	481c      	ldr	r0, [pc, #112]	; (8000774 <main+0x1c0>)
 8000702:	f002 fa31 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	481b      	ldr	r0, [pc, #108]	; (8000778 <main+0x1c4>)
 800070c:	f002 fa2c 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	4819      	ldr	r0, [pc, #100]	; (800077c <main+0x1c8>)
 8000716:	f002 fa27 	bl	8002b68 <HAL_GPIO_WritePin>
				break;
 800071a:	e021      	b.n	8000760 <main+0x1ac>
			case 6:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //BG 011
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <main+0x1c0>)
 8000724:	f002 fa20 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	4812      	ldr	r0, [pc, #72]	; (8000778 <main+0x1c4>)
 800072e:	f002 fa1b 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	4811      	ldr	r0, [pc, #68]	; (800077c <main+0x1c8>)
 8000738:	f002 fa16 	bl	8002b68 <HAL_GPIO_WritePin>
				break;
 800073c:	e010      	b.n	8000760 <main+0x1ac>
			case 7:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //G 010
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <main+0x1c0>)
 8000746:	f002 fa0f 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	480a      	ldr	r0, [pc, #40]	; (8000778 <main+0x1c4>)
 8000750:	f002 fa0a 	bl	8002b68 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <main+0x1c8>)
 800075a:	f002 fa05 	bl	8002b68 <HAL_GPIO_WritePin>
				break;
 800075e:	bf00      	nop
			}
			HAL_Delay(500);
 8000760:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000764:	f000 ff94 	bl	8001690 <HAL_Delay>
		if (flag) {
 8000768:	e743      	b.n	80005f2 <main+0x3e>
 800076a:	bf00      	nop
 800076c:	20000000 	.word	0x20000000
 8000770:	200004d8 	.word	0x200004d8
 8000774:	42020000 	.word	0x42020000
 8000778:	42020800 	.word	0x42020800
 800077c:	42020400 	.word	0x42020400
 8000780:	200004d4 	.word	0x200004d4

08000784 <SysTick_Handler>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
//
void SysTick_Handler(void) { //trigger per 1ms as default
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick(); // tick occurred
 8000788:	f000 ff62 	bl	8001650 <HAL_IncTick>
	tick++;
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <SysTick_Handler+0x18>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a02      	ldr	r2, [pc, #8]	; (800079c <SysTick_Handler+0x18>)
 8000794:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200004d4 	.word	0x200004d4

080007a0 <EXTI13_IRQHandler>:
void EXTI13_IRQHandler(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI13_IRQn 0 */

	/* USER CODE END EXTI13_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13); // EXTI13 occurred
 80007a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007aa:	f002 fa0f 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4844      	ldr	r0, [pc, #272]	; (80008c4 <EXTI13_IRQHandler+0x124>)
 80007b2:	f002 f9c1 	bl	8002b38 <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d07e      	beq.n	80008ba <EXTI13_IRQHandler+0x11a>
			&& !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)
 80007bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c0:	4841      	ldr	r0, [pc, #260]	; (80008c8 <EXTI13_IRQHandler+0x128>)
 80007c2:	f002 f9b9 	bl	8002b38 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d176      	bne.n	80008ba <EXTI13_IRQHandler+0x11a>
			&& !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)) {
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	483f      	ldr	r0, [pc, #252]	; (80008cc <EXTI13_IRQHandler+0x12c>)
 80007d0:	f002 f9b2 	bl	8002b38 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d16f      	bne.n	80008ba <EXTI13_IRQHandler+0x11a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	4839      	ldr	r0, [pc, #228]	; (80008c4 <EXTI13_IRQHandler+0x124>)
 80007e0:	f002 f9c2 	bl	8002b68 <HAL_GPIO_WritePin>
		if (tick < 800) {
 80007e4:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <EXTI13_IRQHandler+0x130>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80007ec:	da30      	bge.n	8000850 <EXTI13_IRQHandler+0xb0>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	4834      	ldr	r0, [pc, #208]	; (80008c4 <EXTI13_IRQHandler+0x124>)
 80007f4:	f002 f9b8 	bl	8002b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	4832      	ldr	r0, [pc, #200]	; (80008c8 <EXTI13_IRQHandler+0x128>)
 8000800:	f002 f9b2 	bl	8002b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	4830      	ldr	r0, [pc, #192]	; (80008cc <EXTI13_IRQHandler+0x12c>)
 800080a:	f002 f9ad 	bl	8002b68 <HAL_GPIO_WritePin>
			for (int x = 0; x < 10000000; x++) {
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	e013      	b.n	800083c <EXTI13_IRQHandler+0x9c>
				if (x % 1000000 == 0)
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <EXTI13_IRQHandler+0x134>)
 8000818:	fb83 1302 	smull	r1, r3, r3, r2
 800081c:	1499      	asrs	r1, r3, #18
 800081e:	17d3      	asrs	r3, r2, #31
 8000820:	1acb      	subs	r3, r1, r3
 8000822:	492d      	ldr	r1, [pc, #180]	; (80008d8 <EXTI13_IRQHandler+0x138>)
 8000824:	fb01 f303 	mul.w	r3, r1, r3
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d103      	bne.n	8000836 <EXTI13_IRQHandler+0x96>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	4826      	ldr	r0, [pc, #152]	; (80008cc <EXTI13_IRQHandler+0x12c>)
 8000832:	f002 f9b1 	bl	8002b98 <HAL_GPIO_TogglePin>
			for (int x = 0; x < 10000000; x++) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3301      	adds	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a27      	ldr	r2, [pc, #156]	; (80008dc <EXTI13_IRQHandler+0x13c>)
 8000840:	4293      	cmp	r3, r2
 8000842:	dbe7      	blt.n	8000814 <EXTI13_IRQHandler+0x74>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2180      	movs	r1, #128	; 0x80
 8000848:	4820      	ldr	r0, [pc, #128]	; (80008cc <EXTI13_IRQHandler+0x12c>)
 800084a:	f002 f98d 	bl	8002b68 <HAL_GPIO_WritePin>
 800084e:	e031      	b.n	80008b4 <EXTI13_IRQHandler+0x114>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	481b      	ldr	r0, [pc, #108]	; (80008c4 <EXTI13_IRQHandler+0x124>)
 8000856:	f002 f987 	bl	8002b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	481b      	ldr	r0, [pc, #108]	; (80008cc <EXTI13_IRQHandler+0x12c>)
 8000860:	f002 f982 	bl	8002b68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086a:	4817      	ldr	r0, [pc, #92]	; (80008c8 <EXTI13_IRQHandler+0x128>)
 800086c:	f002 f97c 	bl	8002b68 <HAL_GPIO_WritePin>
			for (int x = 0; x < 10000000; x++) {
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	e014      	b.n	80008a0 <EXTI13_IRQHandler+0x100>
				if (x % 1000000 == 0)
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <EXTI13_IRQHandler+0x134>)
 800087a:	fb83 1302 	smull	r1, r3, r3, r2
 800087e:	1499      	asrs	r1, r3, #18
 8000880:	17d3      	asrs	r3, r2, #31
 8000882:	1acb      	subs	r3, r1, r3
 8000884:	4914      	ldr	r1, [pc, #80]	; (80008d8 <EXTI13_IRQHandler+0x138>)
 8000886:	fb01 f303 	mul.w	r3, r1, r3
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <EXTI13_IRQHandler+0xfa>
					HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <EXTI13_IRQHandler+0x128>)
 8000896:	f002 f97f 	bl	8002b98 <HAL_GPIO_TogglePin>
			for (int x = 0; x < 10000000; x++) {
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <EXTI13_IRQHandler+0x13c>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	dbe6      	blt.n	8000876 <EXTI13_IRQHandler+0xd6>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <EXTI13_IRQHandler+0x128>)
 80008b0:	f002 f95a 	bl	8002b68 <HAL_GPIO_WritePin>
		}
		flag = 1;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <EXTI13_IRQHandler+0x140>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	601a      	str	r2, [r3, #0]

		/* USER CODE BEGIN EXTI13_IRQn 1 */

		/* USER CODE END EXTI13_IRQn 1 */
	}
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	42020400 	.word	0x42020400
 80008c8:	42020000 	.word	0x42020000
 80008cc:	42020800 	.word	0x42020800
 80008d0:	200004d4 	.word	0x200004d4
 80008d4:	431bde83 	.word	0x431bde83
 80008d8:	000f4240 	.word	0x000f4240
 80008dc:	00989680 	.word	0x00989680
 80008e0:	20000000 	.word	0x20000000

080008e4 <SystemClock_Config>:

void SystemClock_Config(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b098      	sub	sp, #96	; 0x60
 80008e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	2248      	movs	r2, #72	; 0x48
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 ff9d 	bl	8006832 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0)
 8000906:	2000      	movs	r0, #0
 8000908:	f002 fae2 	bl	8002ed0 <HAL_PWREx_ControlVoltageScaling>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x32>
			!= HAL_OK) {
		Error_Handler();
 8000912:	f000 fac3 	bl	8000e9c <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000916:	f002 fabd 	bl	8002e94 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800091a:	4b24      	ldr	r3, [pc, #144]	; (80009ac <SystemClock_Config+0xc8>)
 800091c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <SystemClock_Config+0xc8>)
 8000922:	f023 0318 	bic.w	r3, r3, #24
 8000926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800092a:	2336      	movs	r3, #54	; 0x36
 800092c:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092e:	2381      	movs	r3, #129	; 0x81
 8000930:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000948:	2360      	movs	r3, #96	; 0x60
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000950:	2301      	movs	r3, #1
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 55;
 8000958:	2337      	movs	r3, #55	; 0x37
 800095a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800095c:	2307      	movs	r3, #7
 800095e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fb3f 	bl	8002ff0 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x98>
		Error_Handler();
 8000978:	f000 fa90 	bl	8000e9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2303      	movs	r3, #3
 8000982:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2105      	movs	r1, #5
 8000994:	4618      	mov	r0, r3
 8000996:	f003 f801 	bl	800399c <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xc0>
		Error_Handler();
 80009a0:	f000 fa7c 	bl	8000e9c <Error_Handler>
	}
}
 80009a4:	bf00      	nop
 80009a6:	3760      	adds	r7, #96	; 0x60
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000

080009b0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009d4:	4a2f      	ldr	r2, [pc, #188]	; (8000a94 <MX_ADC1_Init+0xe4>)
 80009d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_ADC1_Init+0xe0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000a32:	4817      	ldr	r0, [pc, #92]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a34:	f000 fff0 	bl	8001a18 <HAL_ADC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_ADC1_Init+0x92>
		Error_Handler();
 8000a3e:	f000 fa2d 	bl	8000e9c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4810      	ldr	r0, [pc, #64]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a4e:	f001 fd3f 	bl	80024d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0xac>
		Error_Handler();
 8000a58:	f000 fa20 	bl	8000e9c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_ADC1_Init+0xe8>)
 8000a5e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a60:	2306      	movs	r3, #6
 8000a62:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a68:	237f      	movs	r3, #127	; 0x7f
 8000a6a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_ADC1_Init+0xe0>)
 8000a7a:	f001 f919 	bl	8001cb0 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000a84:	f000 fa0a 	bl	8000e9c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000088 	.word	0x20000088
 8000a94:	42028000 	.word	0x42028000
 8000a98:	0c900008 	.word	0x0c900008

08000a9c <MX_ICACHE_Init>:
/**
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK) {
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f002 f8cf 	bl	8002c44 <HAL_ICACHE_ConfigAssociativityMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ICACHE_Init+0x14>
		Error_Handler();
 8000aac:	f000 f9f6 	bl	8000e9c <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK) {
 8000ab0:	f002 f8e8 	bl	8002c84 <HAL_ICACHE_Enable>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_ICACHE_Init+0x22>
		Error_Handler();
 8000aba:	f000 f9ef 	bl	8000e9c <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_LPUART1_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <MX_LPUART1_UART_Init+0x98>)
 8000ad2:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000ae8:	220c      	movs	r2, #12
 8000aea:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000b0a:	4812      	ldr	r0, [pc, #72]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000b0c:	f004 fcbc 	bl	8005488 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_LPUART1_UART_Init+0x56>
		Error_Handler();
 8000b16:	f000 f9c1 	bl	8000e9c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000b1e:	f005 fa5b 	bl	8005fd8 <HAL_UARTEx_SetTxFifoThreshold>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_LPUART1_UART_Init+0x68>
			!= HAL_OK) {
		Error_Handler();
 8000b28:	f000 f9b8 	bl	8000e9c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4809      	ldr	r0, [pc, #36]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000b30:	f005 fa90 	bl	8006054 <HAL_UARTEx_SetRxFifoThreshold>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_LPUART1_UART_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 8000b3a:	f000 f9af 	bl	8000e9c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_LPUART1_UART_Init+0x90>)
 8000b40:	f005 fa11 	bl	8005f66 <HAL_UARTEx_DisableFifoMode>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_LPUART1_UART_Init+0x8a>
		Error_Handler();
 8000b4a:	f000 f9a7 	bl	8000e9c <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200000f0 	.word	0x200000f0
 8000b58:	40008000 	.word	0x40008000
 8000b5c:	00033324 	.word	0x00033324

08000b60 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_PrivilegeStateTypeDef privilegeState = { 0 };
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	615a      	str	r2, [r3, #20]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_RTC_Init+0x8c>)
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <MX_RTC_Init+0x90>)
 8000b7a:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_RTC_Init+0x8c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_RTC_Init+0x8c>)
 8000b84:	227f      	movs	r2, #127	; 0x7f
 8000b86:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_RTC_Init+0x8c>)
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_RTC_Init+0x8c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_RTC_Init+0x8c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_RTC_Init+0x8c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_RTC_Init+0x8c>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba6:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_RTC_Init+0x8c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000bae:	480f      	ldr	r0, [pc, #60]	; (8000bec <MX_RTC_Init+0x8c>)
 8000bb0:	f003 feee 	bl	8004990 <HAL_RTC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_RTC_Init+0x5e>
		Error_Handler();
 8000bba:	f000 f96f 	bl	8000e9c <Error_Handler>
	}
	privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
	privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
	privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
	privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
	if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK) {
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_RTC_Init+0x8c>)
 8000bd4:	f003 ffea 	bl	8004bac <HAL_RTCEx_PrivilegeModeSet>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_RTC_Init+0x82>
		Error_Handler();
 8000bde:	f000 f95d 	bl	8000e9c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000184 	.word	0x20000184
 8000bf0:	40002800 	.word	0x40002800

08000bf4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c3a:	4814      	ldr	r0, [pc, #80]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c3c:	f003 ffe2 	bl	8004c04 <HAL_TIM_Base_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x56>
		Error_Handler();
 8000c46:	f000 f929 	bl	8000e9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c50:	f107 0310 	add.w	r3, r7, #16
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c58:	f004 f932 	bl	8004ec0 <HAL_TIM_ConfigClockSource>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x72>
		Error_Handler();
 8000c62:	f000 f91b 	bl	8000e9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_TIM2_Init+0x98>)
 8000c74:	f004 fb62 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000c7e:	f000 f90d 	bl	8000e9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3720      	adds	r7, #32
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001ac 	.word	0x200001ac

08000c90 <MX_UCPD1_Init>:
/**
 * @brief UCPD1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UCPD1_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN UCPD1_Init 0 */

	/* USER CODE END UCPD1_Init 0 */

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000ca6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000caa:	f7ff fc6b 	bl	8000584 <LL_APB1_GRP2_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fc50 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fc4d 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
	/**UCPD1 GPIO Configuration
	 PB15   ------> UCPD1_CC2
	 PA15 (JTDI)   ------> UCPD1_CC1
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbe:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <MX_UCPD1_Init+0x64>)
 8000cce:	f005 fb98 	bl	8006402 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_UCPD1_Init+0x68>)
 8000ce6:	f005 fb8c 	bl	8006402 <LL_GPIO_Init>
	/* USER CODE END UCPD1_Init 1 */
	/* USER CODE BEGIN UCPD1_Init 2 */

	/* USER CODE END UCPD1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	42020400 	.word	0x42020400
 8000cf8:	42020000 	.word	0x42020000

08000cfc <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <MX_USB_PCD_Init+0x4c>)
 8000d04:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d08:	2208      	movs	r2, #8
 8000d0a:	711a      	strb	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	715a      	strb	r2, [r3, #5]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	71da      	strb	r2, [r3, #7]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	721a      	strb	r2, [r3, #8]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	725a      	strb	r2, [r3, #9]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	729a      	strb	r2, [r3, #10]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	72da      	strb	r2, [r3, #11]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_USB_PCD_Init+0x48>)
 8000d32:	f001 ffb7 	bl	8002ca4 <HAL_PCD_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USB_PCD_Init+0x44>
		Error_Handler();
 8000d3c:	f000 f8ae 	bl	8000e9c <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200001f8 	.word	0x200001f8
 8000d48:	4000d400 	.word	0x4000d400

08000d4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	4b4a      	ldr	r3, [pc, #296]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a49      	ldr	r2, [pc, #292]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a43      	ldr	r2, [pc, #268]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
	HAL_PWREx_EnableVddIO2();
 8000daa:	f002 f8ed 	bl	8002f88 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b37      	ldr	r3, [pc, #220]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a36      	ldr	r2, [pc, #216]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <MX_GPIO_Init+0x140>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	4831      	ldr	r0, [pc, #196]	; (8000e90 <MX_GPIO_Init+0x144>)
 8000dcc:	f001 fecc 	bl	8002b68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd6:	482f      	ldr	r0, [pc, #188]	; (8000e94 <MX_GPIO_Init+0x148>)
 8000dd8:	f001 fec6 	bl	8002b68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin | LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	21a0      	movs	r1, #160	; 0xa0
 8000de0:	482d      	ldr	r0, [pc, #180]	; (8000e98 <MX_GPIO_Init+0x14c>)
 8000de2:	f001 fec1 	bl	8002b68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000df0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4824      	ldr	r0, [pc, #144]	; (8000e90 <MX_GPIO_Init+0x144>)
 8000dfe:	f001 fd1b 	bl	8002838 <HAL_GPIO_Init>

	/*Configure GPIO pin : UCPD_FLT_Pin */
	GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <MX_GPIO_Init+0x14c>)
 8000e1a:	f001 fd0d 	bl	8002838 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4816      	ldr	r0, [pc, #88]	; (8000e90 <MX_GPIO_Init+0x144>)
 8000e36:	f001 fcff 	bl	8002838 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <MX_GPIO_Init+0x148>)
 8000e54:	f001 fcf0 	bl	8002838 <HAL_GPIO_Init>

	/*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
	GPIO_InitStruct.Pin = UCPD_DBN_Pin | LED_BLUE_Pin;
 8000e58:	23a0      	movs	r3, #160	; 0xa0
 8000e5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480a      	ldr	r0, [pc, #40]	; (8000e98 <MX_GPIO_Init+0x14c>)
 8000e70:	f001 fce2 	bl	8002838 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2018      	movs	r0, #24
 8000e7a:	f001 fca8 	bl	80027ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000e7e:	2018      	movs	r0, #24
 8000e80:	f001 fcbf 	bl	8002802 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	42020800 	.word	0x42020800
 8000e94:	42020000 	.word	0x42020000
 8000e98:	42020400 	.word	0x42020400

08000e9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <HAL_MspInit+0x44>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_MspInit+0x44>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x44>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x44>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ae      	sub	sp, #184	; 0xb8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2294      	movs	r2, #148	; 0x94
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f005 fc8e 	bl	8006832 <memset>
  if(hadc->Instance==ADC1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <HAL_ADC_MspInit+0xa8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d137      	bne.n	8000f90 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000f2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 f816 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000f3e:	f7ff ffad 	bl	8000e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_ADC_MspInit+0xac>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <HAL_ADC_MspInit+0xac>)
 8000f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_ADC_MspInit+0xac>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <HAL_ADC_MspInit+0xac>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_ADC_MspInit+0xac>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <HAL_ADC_MspInit+0xac>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f72:	2304      	movs	r3, #4
 8000f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_ADC_MspInit+0xb0>)
 8000f8c:	f001 fc54 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	37b8      	adds	r7, #184	; 0xb8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	42028000 	.word	0x42028000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	42020800 	.word	0x42020800

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ae      	sub	sp, #184	; 0xb8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2294      	movs	r2, #148	; 0x94
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 fc34 	bl	8006832 <memset>
  if(huart->Instance==LPUART1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_UART_MspInit+0xb4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d13d      	bne.n	8001050 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 ffbf 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f7ff ff56 	bl	8000e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_UART_MspInit+0xb8>)
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_UART_MspInit+0xb8>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_UART_MspInit+0xb8>)
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_UART_MspInit+0xb8>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_UART_MspInit+0xb8>)
 800100e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_UART_MspInit+0xb8>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001020:	f001 ffb2 	bl	8002f88 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001024:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001028:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800103e:	2308      	movs	r3, #8
 8001040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001044:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_UART_MspInit+0xbc>)
 800104c:	f001 fbf4 	bl	8002838 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	37b8      	adds	r7, #184	; 0xb8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40008000 	.word	0x40008000
 800105c:	40021000 	.word	0x40021000
 8001060:	42021800 	.word	0x42021800

08001064 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0a8      	sub	sp, #160	; 0xa0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2294      	movs	r2, #148	; 0x94
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f005 fbdc 	bl	8006832 <memset>
  if(hrtc->Instance==RTC)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_RTC_MspInit+0x74>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d124      	bne.n	80010ce <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001088:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4618      	mov	r0, r3
 8001098:	f002 ff64 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80010a2:	f7ff fefb 	bl	8000e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_RTC_MspInit+0x78>)
 80010a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_RTC_MspInit+0x78>)
 80010ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_RTC_MspInit+0x78>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_RTC_MspInit+0x78>)
 80010bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c0:	6593      	str	r3, [r2, #88]	; 0x58
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_RTC_MspInit+0x78>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010ce:	bf00      	nop
 80010d0:	37a0      	adds	r7, #160	; 0xa0
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40002800 	.word	0x40002800
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d113      	bne.n	800111a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0x44>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	202d      	movs	r0, #45	; 0x2d
 8001110:	f001 fb5d 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001114:	202d      	movs	r0, #45	; 0x2d
 8001116:	f001 fb74 	bl	8002802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b0ae      	sub	sp, #184	; 0xb8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	2294      	movs	r2, #148	; 0x94
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f005 fb72 	bl	8006832 <memset>
  if(hpcd->Instance==USB)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a22      	ldr	r2, [pc, #136]	; (80011dc <HAL_PCD_MspInit+0xb4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d13d      	bne.n	80011d4 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fefb 	bl	8003f64 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001174:	f7ff fe92 	bl	8000e9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_PCD_MspInit+0xb8>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_PCD_MspInit+0xb8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_PCD_MspInit+0xb8>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001190:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80011aa:	230a      	movs	r3, #10
 80011ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011b4:	4619      	mov	r1, r3
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <HAL_PCD_MspInit+0xbc>)
 80011b8:	f001 fb3e 	bl	8002838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_PCD_MspInit+0xb8>)
 80011be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_PCD_MspInit+0xb8>)
 80011c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_PCD_MspInit+0xb8>)
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	37b8      	adds	r7, #184	; 0xb8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	4000d400 	.word	0x4000d400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	42020000 	.word	0x42020000

080011e8 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80011ec:	e7fe      	b.n	80011ec <NMI_Handler+0x4>

080011ee <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80011f2:	e7fe      	b.n	80011f2 <HardFault_Handler+0x4>

080011f4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80011f8:	e7fe      	b.n	80011f8 <MemManage_Handler+0x4>

080011fa <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80011fe:	e7fe      	b.n	80011fe <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8001204:	e7fe      	b.n	8001204 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <TIM2_IRQHandler>:
 */

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <TIM2_IRQHandler+0x10>)
 8001236:	f003 fd3c 	bl	8004cb2 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200001ac 	.word	0x200001ac

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800125e:	f005 fb63 	bl	8006928 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001286:	e7fe      	b.n	8001286 <_exit+0x12>

08001288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
  }

  return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e009      	b.n	80012e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf1      	blt.n	80012d4 <_write+0x12>
  }
  return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_close>:

int _close(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	605a      	str	r2, [r3, #4]
  return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_isatty>:

int _isatty(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f005 fac8 	bl	8006928 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20030000 	.word	0x20030000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	200004dc 	.word	0x200004dc
 80013cc:	20000630 	.word	0x20000630

080013d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <SystemCoreClockUpdate+0x144>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001406:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <SystemCoreClockUpdate+0x144>)
 8001408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e005      	b.n	8001422 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001416:	4b48      	ldr	r3, [pc, #288]	; (8001538 <SystemCoreClockUpdate+0x144>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001422:	4a46      	ldr	r2, [pc, #280]	; (800153c <SystemCoreClockUpdate+0x148>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800142c:	4b42      	ldr	r3, [pc, #264]	; (8001538 <SystemCoreClockUpdate+0x144>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d866      	bhi.n	8001506 <SystemCoreClockUpdate+0x112>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <SystemCoreClockUpdate+0x4c>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001475 	.word	0x08001475
 8001444:	08001507 	.word	0x08001507
 8001448:	08001507 	.word	0x08001507
 800144c:	08001507 	.word	0x08001507
 8001450:	0800147d 	.word	0x0800147d
 8001454:	08001507 	.word	0x08001507
 8001458:	08001507 	.word	0x08001507
 800145c:	08001507 	.word	0x08001507
 8001460:	08001485 	.word	0x08001485
 8001464:	08001507 	.word	0x08001507
 8001468:	08001507 	.word	0x08001507
 800146c:	08001507 	.word	0x08001507
 8001470:	0800148d 	.word	0x0800148d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001474:	4a32      	ldr	r2, [pc, #200]	; (8001540 <SystemCoreClockUpdate+0x14c>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	6013      	str	r3, [r2, #0]
      break;
 800147a:	e048      	b.n	800150e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800147c:	4b30      	ldr	r3, [pc, #192]	; (8001540 <SystemCoreClockUpdate+0x14c>)
 800147e:	4a31      	ldr	r2, [pc, #196]	; (8001544 <SystemCoreClockUpdate+0x150>)
 8001480:	601a      	str	r2, [r3, #0]
      break;
 8001482:	e044      	b.n	800150e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <SystemCoreClockUpdate+0x14c>)
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <SystemCoreClockUpdate+0x154>)
 8001488:	601a      	str	r2, [r3, #0]
      break;
 800148a:	e040      	b.n	800150e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <SystemCoreClockUpdate+0x144>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <SystemCoreClockUpdate+0x144>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	3301      	adds	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d003      	beq.n	80014b2 <SystemCoreClockUpdate+0xbe>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d006      	beq.n	80014be <SystemCoreClockUpdate+0xca>
 80014b0:	e00b      	b.n	80014ca <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80014b2:	4a24      	ldr	r2, [pc, #144]	; (8001544 <SystemCoreClockUpdate+0x150>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	613b      	str	r3, [r7, #16]
          break;
 80014bc:	e00b      	b.n	80014d6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80014be:	4a22      	ldr	r2, [pc, #136]	; (8001548 <SystemCoreClockUpdate+0x154>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	613b      	str	r3, [r7, #16]
          break;
 80014c8:	e005      	b.n	80014d6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	613b      	str	r3, [r7, #16]
          break;
 80014d4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <SystemCoreClockUpdate+0x144>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <SystemCoreClockUpdate+0x144>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0e5b      	lsrs	r3, r3, #25
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	3301      	adds	r3, #1
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <SystemCoreClockUpdate+0x14c>)
 8001502:	6013      	str	r3, [r2, #0]
      break;
 8001504:	e003      	b.n	800150e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <SystemCoreClockUpdate+0x14c>)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	6013      	str	r3, [r2, #0]
      break;
 800150c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <SystemCoreClockUpdate+0x144>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <SystemCoreClockUpdate+0x158>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SystemCoreClockUpdate+0x14c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemCoreClockUpdate+0x14c>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40021000 	.word	0x40021000
 800153c:	0800762c 	.word	0x0800762c
 8001540:	20000004 	.word	0x20000004
 8001544:	00f42400 	.word	0x00f42400
 8001548:	007a1200 	.word	0x007a1200
 800154c:	08007614 	.word	0x08007614

08001550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001554:	f7ff ff3c 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001558:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800155a:	e003      	b.n	8001564 <LoopCopyDataInit>

0800155c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800155e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001560:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001562:	3104      	adds	r1, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001568:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800156a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800156c:	d3f6      	bcc.n	800155c <CopyDataInit>
	ldr	r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001570:	e002      	b.n	8001578 <LoopFillZerobss>

08001572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001572:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001574:	f842 3b04 	str.w	r3, [r2], #4

08001578 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <LoopForever+0x16>)
	cmp	r2, r3
 800157a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800157c:	d3f9      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800157e:	f005 f9d9 	bl	8006934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001582:	f7ff f817 	bl	80005b4 <main>

08001586 <LoopForever>:

LoopForever:
    b LoopForever
 8001586:	e7fe      	b.n	8001586 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001588:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800158c:	08007784 	.word	0x08007784
	ldr	r0, =_sdata
 8001590:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001594:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 8001598:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 800159c:	20000630 	.word	0x20000630

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>

080015a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80015ac:	2004      	movs	r0, #4
 80015ae:	f001 f903 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80015b2:	f7ff ff1f 	bl	80013f4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f80e 	bl	80015d8 <HAL_InitTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	e001      	b.n	80015cc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015c8:	f7ff fc6e 	bl	8000ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015cc:	79fb      	ldrb	r3, [r7, #7]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_InitTick+0x6c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d023      	beq.n	8001634 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <HAL_InitTick+0x70>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_InitTick+0x6c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f001 f90b 	bl	800281e <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b07      	cmp	r3, #7
 8001612:	d809      	bhi.n	8001628 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001614:	2200      	movs	r2, #0
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f001 f8d7 	bl	80027ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_InitTick+0x74>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	e007      	b.n	8001638 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e004      	b.n	8001638 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e001      	b.n	8001638 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000000c 	.word	0x2000000c
 8001648:	20000004 	.word	0x20000004
 800164c:	20000008 	.word	0x20000008

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000000c 	.word	0x2000000c
 8001674:	200004e0 	.word	0x200004e0

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	200004e0 	.word	0x200004e0

08001690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff ffee 	bl	8001678 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a8:	d005      	beq.n	80016b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_Delay+0x44>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b6:	bf00      	nop
 80016b8:	f7ff ffde 	bl	8001678 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d8f7      	bhi.n	80016b8 <HAL_Delay+0x28>
  {
  }
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000000c 	.word	0x2000000c

080016d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	609a      	str	r2, [r3, #8]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	609a      	str	r2, [r3, #8]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	3360      	adds	r3, #96	; 0x60
 8001752:	461a      	mov	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <LL_ADC_SetOffset+0x44>)
 8001762:	4013      	ands	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	4313      	orrs	r3, r2
 8001770:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	03fff000 	.word	0x03fff000

08001788 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3360      	adds	r3, #96	; 0x60
 8001796:	461a      	mov	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3360      	adds	r3, #96	; 0x60
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017de:	bf00      	nop
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	615a      	str	r2, [r3, #20]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3330      	adds	r3, #48	; 0x30
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	4413      	add	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	211f      	movs	r1, #31
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0e9b      	lsrs	r3, r3, #26
 8001848:	f003 011f 	and.w	r1, r3, #31
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	431a      	orrs	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3314      	adds	r3, #20
 8001878:	461a      	mov	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	0e5b      	lsrs	r3, r3, #25
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	0d1b      	lsrs	r3, r3, #20
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2107      	movs	r1, #7
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	401a      	ands	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	0d1b      	lsrs	r3, r3, #20
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0318 	and.w	r3, r3, #24
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	400b      	ands	r3, r1
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0007ffff 	.word	0x0007ffff

08001908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6093      	str	r3, [r2, #8]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800193c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001940:	d101      	bne.n	8001946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001968:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <LL_ADC_IsEnabled+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_ADC_IsEnabled+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d101      	bne.n	80019e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e12e      	b.n	8001c90 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fa55 	bl	8000ef0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff67 	bl	800192c <LL_ADC_IsDeepPowerDownEnabled>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff4d 	bl	8001908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff82 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d115      	bne.n	8001aaa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff66 	bl	8001954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a88:	4b83      	ldr	r3, [pc, #524]	; (8001c98 <HAL_ADC_Init+0x280>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	4a83      	ldr	r2, [pc, #524]	; (8001c9c <HAL_ADC_Init+0x284>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	099b      	lsrs	r3, r3, #6
 8001a96:	3301      	adds	r3, #1
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff64 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f043 0210 	orr.w	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff75 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001ae0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80c7 	bne.w	8001c7e <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 80c3 	bne.w	8001c7e <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b00:	f043 0202 	orr.w	r2, r3, #2
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff49 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d110      	bne.n	8001b3a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b18:	4861      	ldr	r0, [pc, #388]	; (8001ca0 <HAL_ADC_Init+0x288>)
 8001b1a:	f7ff ff43 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4860      	ldr	r0, [pc, #384]	; (8001ca4 <HAL_ADC_Init+0x28c>)
 8001b22:	f7ff ff3f 	bl	80019a4 <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4323      	orrs	r3, r4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4619      	mov	r1, r3
 8001b34:	485c      	ldr	r0, [pc, #368]	; (8001ca8 <HAL_ADC_Init+0x290>)
 8001b36:	f7ff fdcf 	bl	80016d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7e5b      	ldrb	r3, [r3, #25]
 8001b3e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b44:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b4a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b50:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b58:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	045b      	lsls	r3, r3, #17
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_ADC_Init+0x294>)
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	69b9      	ldr	r1, [r7, #24]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff20 	bl	80019f0 <LL_ADC_INJ_IsConversionOngoing>
 8001bb0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d140      	bne.n	8001c3a <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d13d      	bne.n	8001c3a <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7e1b      	ldrb	r3, [r3, #24]
 8001bc6:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc8:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bd0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be0:	f023 0306 	bic.w	r3, r3, #6
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	69b9      	ldr	r1, [r7, #24]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d118      	bne.n	8001c2a <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c02:	f023 0304 	bic.w	r3, r3, #4
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c14:	4311      	orrs	r1, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	e007      	b.n	8001c3a <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10c      	bne.n	8001c5c <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	f023 010f 	bic.w	r1, r3, #15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5a:	e007      	b.n	8001c6c <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 020f 	bic.w	r2, r2, #15
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	f023 0303 	bic.w	r3, r3, #3
 8001c74:	f043 0201 	orr.w	r2, r3, #1
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c7c:	e007      	b.n	8001c8e <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	f043 0210 	orr.w	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3724      	adds	r7, #36	; 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	053e2d63 	.word	0x053e2d63
 8001ca0:	42028000 	.word	0x42028000
 8001ca4:	42028100 	.word	0x42028100
 8001ca8:	42028300 	.word	0x42028300
 8001cac:	fff0c007 	.word	0xfff0c007

08001cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001cb0:	b590      	push	{r4, r7, lr}
 8001cb2:	b0b7      	sub	sp, #220	; 0xdc
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x22>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e3c1      	b.n	8002456 <HAL_ADC_ConfigChannel+0x7a6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fe73 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 83a6 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f7ff fd89 	bl	8001810 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fe61 	bl	80019ca <LL_ADC_REG_IsConversionOngoing>
 8001d08:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fe6d 	bl	80019f0 <LL_ADC_INJ_IsConversionOngoing>
 8001d16:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 81c1 	bne.w	80020a6 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f040 81bc 	bne.w	80020a6 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d36:	d10f      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7ff fd90 	bl	8001868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fd4a 	bl	80017ea <LL_ADC_SetSamplingTimeCommonConfig>
 8001d56:	e00e      	b.n	8001d76 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f7ff fd7f 	bl	8001868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fd3a 	bl	80017ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d00a      	beq.n	8001dae <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6919      	ldr	r1, [r3, #16]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001da8:	f7ff fcca 	bl	8001740 <LL_ADC_SetOffset>
 8001dac:	e17b      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fce7 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10a      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x12a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fcdc 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	0e9b      	lsrs	r3, r3, #26
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	e01e      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x168>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fcd1 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e004      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x180>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0e9b      	lsrs	r3, r3, #26
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	e018      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1b2>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e004      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001e58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d106      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fca0 	bl	80017b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2101      	movs	r1, #1
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fc84 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10a      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1f0>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fc79 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	e01e      	b.n	8001ede <HAL_ADC_ConfigChannel+0x22e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fc6e 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e004      	b.n	8001edc <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x246>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e9b      	lsrs	r3, r3, #26
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	e018      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x278>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e004      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d106      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2101      	movs	r1, #1
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fc3d 	bl	80017b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fc21 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10a      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x2b6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2102      	movs	r1, #2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fc16 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	0e9b      	lsrs	r3, r3, #26
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	e01e      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x2f4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fc0b 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e004      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001f98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f9c:	fab3 f383 	clz	r3, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x30c>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	e016      	b.n	8001fea <HAL_ADC_ConfigChannel+0x33a>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e004      	b.n	8001fea <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d106      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fbdc 	bl	80017b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2103      	movs	r1, #3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fbc0 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x378>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2103      	movs	r1, #3
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fbb5 	bl	8001788 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 021f 	and.w	r2, r3, #31
 8002026:	e017      	b.n	8002058 <HAL_ADC_ConfigChannel+0x3a8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2103      	movs	r1, #3
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fbaa 	bl	8001788 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002040:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002042:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800204a:	2320      	movs	r3, #32
 800204c:	e003      	b.n	8002056 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800204e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x3c0>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0e9b      	lsrs	r3, r3, #26
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	e011      	b.n	8002094 <HAL_ADC_ConfigChannel+0x3e4>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800207e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002080:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 800208c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2200      	movs	r2, #0
 800209e:	2103      	movs	r1, #3
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fb87 	bl	80017b4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff fc7a 	bl	80019a4 <LL_ADC_IsEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 81c9 	bne.w	800244a <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	461a      	mov	r2, r3
 80020c6:	f7ff fbfb 	bl	80018c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	4a8f      	ldr	r2, [pc, #572]	; (800230c <HAL_ADC_ConfigChannel+0x65c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	f040 8131 	bne.w	8002338 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10b      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x44e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2b09      	cmp	r3, #9
 80020f4:	bf94      	ite	ls
 80020f6:	2301      	movls	r3, #1
 80020f8:	2300      	movhi	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	e019      	b.n	8002132 <HAL_ADC_ConfigChannel+0x482>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800210c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800210e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800211a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	3301      	adds	r3, #1
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2b09      	cmp	r3, #9
 800212a:	bf94      	ite	ls
 800212c:	2301      	movls	r3, #1
 800212e:	2300      	movhi	r3, #0
 8002130:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002132:	2b00      	cmp	r3, #0
 8002134:	d079      	beq.n	800222a <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213e:	2b00      	cmp	r3, #0
 8002140:	d107      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x4a2>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	3301      	adds	r3, #1
 800214a:	069b      	lsls	r3, r3, #26
 800214c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002150:	e015      	b.n	800217e <HAL_ADC_ConfigChannel+0x4ce>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002162:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	3301      	adds	r3, #1
 8002178:	069b      	lsls	r3, r3, #26
 800217a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_ADC_ConfigChannel+0x4ee>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	e017      	b.n	80021ce <HAL_ADC_ConfigChannel+0x51e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e003      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80021ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2101      	movs	r1, #1
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	ea42 0103 	orr.w	r1, r2, r3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x544>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	3301      	adds	r3, #1
 80021e6:	f003 021f 	and.w	r2, r3, #31
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	051b      	lsls	r3, r3, #20
 80021f2:	e018      	b.n	8002226 <HAL_ADC_ConfigChannel+0x576>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f003 021f 	and.w	r2, r3, #31
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002226:	430b      	orrs	r3, r1
 8002228:	e081      	b.n	800232e <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d107      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x596>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	3301      	adds	r3, #1
 800223e:	069b      	lsls	r3, r3, #26
 8002240:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002244:	e015      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5c2>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800225e:	2320      	movs	r3, #32
 8002260:	e003      	b.n	800226a <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	069b      	lsls	r3, r3, #26
 800226e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x5e2>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	3301      	adds	r3, #1
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	e017      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x612>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	61fb      	str	r3, [r7, #28]
  return result;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	ea42 0103 	orr.w	r1, r2, r3
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x63e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 021f 	and.w	r2, r3, #31
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	3b1e      	subs	r3, #30
 80022e6:	051b      	lsls	r3, r3, #20
 80022e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ec:	e01e      	b.n	800232c <HAL_ADC_ConfigChannel+0x67c>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	613b      	str	r3, [r7, #16]
  return result;
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d104      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e006      	b.n	8002318 <HAL_ADC_ConfigChannel+0x668>
 800230a:	bf00      	nop
 800230c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f003 021f 	and.w	r2, r3, #31
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	3b1e      	subs	r3, #30
 8002326:	051b      	lsls	r3, r3, #20
 8002328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002332:	4619      	mov	r1, r3
 8002334:	f7ff fa98 	bl	8001868 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_ADC_ConfigChannel+0x7b0>)
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8082 	beq.w	800244a <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002346:	4847      	ldr	r0, [pc, #284]	; (8002464 <HAL_ADC_ConfigChannel+0x7b4>)
 8002348:	f7ff f9ec 	bl	8001724 <LL_ADC_GetCommonPathInternalCh>
 800234c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002350:	4845      	ldr	r0, [pc, #276]	; (8002468 <HAL_ADC_ConfigChannel+0x7b8>)
 8002352:	f7ff fb27 	bl	80019a4 <LL_ADC_IsEnabled>
 8002356:	4604      	mov	r4, r0
 8002358:	4844      	ldr	r0, [pc, #272]	; (800246c <HAL_ADC_ConfigChannel+0x7bc>)
 800235a:	f7ff fb23 	bl	80019a4 <LL_ADC_IsEnabled>
 800235e:	4603      	mov	r3, r0
 8002360:	4323      	orrs	r3, r4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d15e      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a41      	ldr	r2, [pc, #260]	; (8002470 <HAL_ADC_ConfigChannel+0x7c0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d127      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d121      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a39      	ldr	r2, [pc, #228]	; (8002468 <HAL_ADC_ConfigChannel+0x7b8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d161      	bne.n	800244a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002386:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800238a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800238e:	4619      	mov	r1, r3
 8002390:	4834      	ldr	r0, [pc, #208]	; (8002464 <HAL_ADC_ConfigChannel+0x7b4>)
 8002392:	f7ff f9b4 	bl	80016fe <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_ADC_ConfigChannel+0x7c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	4a36      	ldr	r2, [pc, #216]	; (8002478 <HAL_ADC_ConfigChannel+0x7c8>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	099b      	lsrs	r3, r3, #6
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80023ae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80023b0:	e002      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f9      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023be:	e044      	b.n	800244a <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a2d      	ldr	r2, [pc, #180]	; (800247c <HAL_ADC_ConfigChannel+0x7cc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d113      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a23      	ldr	r2, [pc, #140]	; (8002468 <HAL_ADC_ConfigChannel+0x7b8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d134      	bne.n	800244a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023e8:	4619      	mov	r1, r3
 80023ea:	481e      	ldr	r0, [pc, #120]	; (8002464 <HAL_ADC_ConfigChannel+0x7b4>)
 80023ec:	f7ff f987 	bl	80016fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f0:	e02b      	b.n	800244a <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a22      	ldr	r2, [pc, #136]	; (8002480 <HAL_ADC_ConfigChannel+0x7d0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d126      	bne.n	800244a <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d120      	bne.n	800244a <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a16      	ldr	r2, [pc, #88]	; (8002468 <HAL_ADC_ConfigChannel+0x7b8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d11b      	bne.n	800244a <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800241a:	4619      	mov	r1, r3
 800241c:	4811      	ldr	r0, [pc, #68]	; (8002464 <HAL_ADC_ConfigChannel+0x7b4>)
 800241e:	f7ff f96e 	bl	80016fe <LL_ADC_SetCommonPathInternalCh>
 8002422:	e012      	b.n	800244a <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002436:	e008      	b.n	800244a <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002452:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002456:	4618      	mov	r0, r3
 8002458:	37dc      	adds	r7, #220	; 0xdc
 800245a:	46bd      	mov	sp, r7
 800245c:	bd90      	pop	{r4, r7, pc}
 800245e:	bf00      	nop
 8002460:	80080000 	.word	0x80080000
 8002464:	42028300 	.word	0x42028300
 8002468:	42028000 	.word	0x42028000
 800246c:	42028100 	.word	0x42028100
 8002470:	c7520000 	.word	0xc7520000
 8002474:	20000004 	.word	0x20000004
 8002478:	053e2d63 	.word	0x053e2d63
 800247c:	cb840000 	.word	0xcb840000
 8002480:	80000001 	.word	0x80000001

08002484 <LL_ADC_IsEnabled>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <LL_ADC_IsEnabled+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_ADC_IsEnabled+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_REG_IsConversionOngoing>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d101      	bne.n	80024c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b0a1      	sub	sp, #132	; 0x84
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e089      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024f6:	2300      	movs	r3, #0
 80024f8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024fa:	2300      	movs	r3, #0
 80024fc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a42      	ldr	r2, [pc, #264]	; (800260c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d102      	bne.n	800250e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002508:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e001      	b.n	8002512 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e068      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ffb9 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 8002538:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ffb3 	bl	80024aa <LL_ADC_REG_IsConversionOngoing>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d14a      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800254a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800254c:	2b00      	cmp	r3, #0
 800254e:	d147      	bne.n	80025e0 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002550:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002552:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d027      	beq.n	80025ac <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800255c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256e:	035b      	lsls	r3, r3, #13
 8002570:	430b      	orrs	r3, r1
 8002572:	431a      	orrs	r2, r3
 8002574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002576:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002578:	4824      	ldr	r0, [pc, #144]	; (800260c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800257a:	f7ff ff83 	bl	8002484 <LL_ADC_IsEnabled>
 800257e:	4604      	mov	r4, r0
 8002580:	4823      	ldr	r0, [pc, #140]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002582:	f7ff ff7f 	bl	8002484 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	4323      	orrs	r3, r4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d132      	bne.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800258e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002596:	f023 030f 	bic.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	6811      	ldr	r1, [r2, #0]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	6892      	ldr	r2, [r2, #8]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	431a      	orrs	r2, r3
 80025a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025aa:	e023      	b.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b8:	4814      	ldr	r0, [pc, #80]	; (800260c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80025ba:	f7ff ff63 	bl	8002484 <LL_ADC_IsEnabled>
 80025be:	4604      	mov	r4, r0
 80025c0:	4813      	ldr	r0, [pc, #76]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025c2:	f7ff ff5f 	bl	8002484 <LL_ADC_IsEnabled>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4323      	orrs	r3, r4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d112      	bne.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025d6:	f023 030f 	bic.w	r3, r3, #15
 80025da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025de:	e009      	b.n	80025f4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025f2:	e000      	b.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002602:	4618      	mov	r0, r3
 8002604:	3784      	adds	r7, #132	; 0x84
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	bf00      	nop
 800260c:	42028000 	.word	0x42028000
 8002610:	42028100 	.word	0x42028100
 8002614:	42028300 	.word	0x42028300

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0152      	lsls	r2, r2, #5
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0152      	lsls	r2, r2, #5
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b03      	cmp	r3, #3
 8002728:	bf28      	it	cs
 800272a:	2303      	movcs	r3, #3
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3303      	adds	r3, #3
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b04      	subs	r3, #4
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	2107      	movs	r1, #7
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff29 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027dc:	f7ff ff40 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7ff ff90 	bl	800270c <NVIC_EncodePriority>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	4611      	mov	r1, r2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff ff5f 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff33 	bl	800267c <__NVIC_EnableIRQ>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffa4 	bl	8002774 <SysTick_Config>
 800282c:	4603      	mov	r3, r0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002846:	e158      	b.n	8002afa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 814a 	beq.w	8002af4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d005      	beq.n	8002878 <HAL_GPIO_Init+0x40>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d130      	bne.n	80028da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ae:	2201      	movs	r2, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0201 	and.w	r2, r3, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d017      	beq.n	8002916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	2203      	movs	r2, #3
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d123      	bne.n	800296a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	220f      	movs	r2, #15
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	6939      	ldr	r1, [r7, #16]
 8002966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4013      	ands	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0203 	and.w	r2, r3, #3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 80a4 	beq.w	8002af4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80029ac:	4a5a      	ldr	r2, [pc, #360]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3318      	adds	r3, #24
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a52      	ldr	r2, [pc, #328]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d025      	beq.n	8002a24 <HAL_GPIO_Init+0x1ec>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01f      	beq.n	8002a20 <HAL_GPIO_Init+0x1e8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a50      	ldr	r2, [pc, #320]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d019      	beq.n	8002a1c <HAL_GPIO_Init+0x1e4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <HAL_GPIO_Init+0x2f0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_GPIO_Init+0x1e0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_GPIO_Init+0x2f4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_GPIO_Init+0x1dc>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <HAL_GPIO_Init+0x2f8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <HAL_GPIO_Init+0x1d8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <HAL_GPIO_Init+0x2fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_GPIO_Init+0x1d4>
 8002a08:	2306      	movs	r3, #6
 8002a0a:	e00c      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	e00a      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a10:	2305      	movs	r3, #5
 8002a12:	e008      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e006      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e004      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e002      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_GPIO_Init+0x1ee>
 8002a24:	2300      	movs	r3, #0
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	f002 0203 	and.w	r2, r2, #3
 8002a2c:	00d2      	lsls	r2, r2, #3
 8002a2e:	4093      	lsls	r3, r2
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002a36:	4938      	ldr	r1, [pc, #224]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a44:	4b34      	ldr	r3, [pc, #208]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a68:	4a2b      	ldr	r2, [pc, #172]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a92:	4a21      	ldr	r2, [pc, #132]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a98:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_GPIO_Init+0x2e0>)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	3301      	adds	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f47f ae9f 	bne.w	8002848 <HAL_GPIO_Init+0x10>
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	4002f400 	.word	0x4002f400
 8002b1c:	42020000 	.word	0x42020000
 8002b20:	42020400 	.word	0x42020400
 8002b24:	42020800 	.word	0x42020800
 8002b28:	42020c00 	.word	0x42020c00
 8002b2c:	42021000 	.word	0x42021000
 8002b30:	42021400 	.word	0x42021400
 8002b34:	42021800 	.word	0x42021800

08002b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	887b      	ldrh	r3, [r7, #2]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
 8002b54:	e001      	b.n	8002b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b84:	e002      	b.n	8002b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	041a      	lsls	r2, r3, #16
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43d9      	mvns	r1, r3
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	400b      	ands	r3, r1
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002bd6:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f814 	bl	8002c18 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002bfc:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 f812 	bl	8002c2e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	4002f400 	.word	0x4002f400

08002c18 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e007      	b.n	8002c72 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 0204 	bic.w	r2, r3, #4
 8002c6a:	4905      	ldr	r1, [pc, #20]	; (8002c80 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40030400 	.word	0x40030400

08002c84 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_ICACHE_Enable+0x1c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_ICACHE_Enable+0x1c>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40030400 	.word	0x40030400

08002ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0c0      	b.n	8002e38 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fa2c 	bl	8001128 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fbfd 	bl	80064dc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e03e      	b.n	8002d66 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3311      	adds	r3, #17
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3310      	adds	r3, #16
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3313      	adds	r3, #19
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3320      	adds	r3, #32
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	4613      	mov	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	440b      	add	r3, r1
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	3301      	adds	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	791b      	ldrb	r3, [r3, #4]
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3bb      	bcc.n	8002ce8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	e044      	b.n	8002e00 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	440b      	add	r3, r1
 8002d84:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	791b      	ldrb	r3, [r3, #4]
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3b5      	bcc.n	8002d76 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e16:	f003 fb7c 	bl	8006512 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7a9b      	ldrb	r3, [r3, #10]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f805 	bl	8002e40 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea2:	6013      	str	r3, [r2, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40007000 	.word	0x40007000

08002ed0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002ed8:	4b27      	ldr	r3, [pc, #156]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ee0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002ee2:	f000 f861 	bl	8002fa8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d101      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e03e      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d101      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e035      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d101      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e02f      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002f18:	4917      	ldr	r1, [pc, #92]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	09db      	lsrs	r3, r3, #7
 8002f2e:	2232      	movs	r2, #50	; 0x32
 8002f30:	fb02 f303 	mul.w	r3, r2, r3
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	08db      	lsrs	r3, r3, #3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f40:	e002      	b.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	d102      	bne.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f2      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d101      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e000      	b.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	0a7c5ac5 	.word	0x0a7c5ac5
 8002f84:	cccccccd 	.word	0xcccccccd

08002f88 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f96:	6053      	str	r3, [r2, #4]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40007000 	.word	0x40007000

08002fa8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	e00a      	b.n	8002fdc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	e001      	b.n	8002fdc <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002fdc:	687b      	ldr	r3, [r7, #4]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40007000 	.word	0x40007000

08002ff0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f000 bcc2 	b.w	8003988 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003004:	4b99      	ldr	r3, [pc, #612]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800300e:	4b97      	ldr	r3, [pc, #604]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80e9 	beq.w	80031f8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_RCC_OscConfig+0x4a>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	2b0c      	cmp	r3, #12
 8003030:	f040 8083 	bne.w	800313a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d17f      	bne.n	800313a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800303a:	4b8c      	ldr	r3, [pc, #560]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <HAL_RCC_OscConfig+0x64>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	f000 bc9a 	b.w	8003988 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003058:	4b84      	ldr	r3, [pc, #528]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_RCC_OscConfig+0x7e>
 8003064:	4b81      	ldr	r3, [pc, #516]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800306c:	e005      	b.n	800307a <HAL_RCC_OscConfig+0x8a>
 800306e:	4b7f      	ldr	r3, [pc, #508]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800307a:	4293      	cmp	r3, r2
 800307c:	d224      	bcs.n	80030c8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fe9c 	bl	8003dc0 <RCC_SetFlashLatencyFromMSIRange>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f000 bc7a 	b.w	8003988 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003094:	4b75      	ldr	r3, [pc, #468]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a74      	ldr	r2, [pc, #464]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 800309a:	f043 0308 	orr.w	r3, r3, #8
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	4b72      	ldr	r3, [pc, #456]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	496f      	ldr	r1, [pc, #444]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b2:	4b6e      	ldr	r3, [pc, #440]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	496a      	ldr	r1, [pc, #424]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
 80030c6:	e026      	b.n	8003116 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	4962      	ldr	r1, [pc, #392]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e6:	4b61      	ldr	r3, [pc, #388]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	495d      	ldr	r1, [pc, #372]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fe5b 	bl	8003dc0 <RCC_SetFlashLatencyFromMSIRange>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f000 bc39 	b.w	8003988 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003116:	f000 fe17 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 800311a:	4603      	mov	r3, r0
 800311c:	4a54      	ldr	r2, [pc, #336]	; (8003270 <HAL_RCC_OscConfig+0x280>)
 800311e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003120:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_RCC_OscConfig+0x284>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fa57 	bl	80015d8 <HAL_InitTick>
 800312a:	4603      	mov	r3, r0
 800312c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d060      	beq.n	80031f6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	f000 bc27 	b.w	8003988 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d039      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003142:	4b4a      	ldr	r3, [pc, #296]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a49      	ldr	r2, [pc, #292]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314e:	f7fe fa93 	bl	8001678 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003154:	e00f      	b.n	8003176 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003156:	f7fe fa8f 	bl	8001678 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d908      	bls.n	8003176 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003164:	4b41      	ldr	r3, [pc, #260]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	f000 bc09 	b.w	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0e9      	beq.n	8003156 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a39      	ldr	r2, [pc, #228]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b37      	ldr	r3, [pc, #220]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	492f      	ldr	r1, [pc, #188]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	e020      	b.n	80031f8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2c      	ldr	r2, [pc, #176]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fa59 	bl	8001678 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031c8:	e00e      	b.n	80031e8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ca:	f7fe fa55 	bl	8001678 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d907      	bls.n	80031e8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031d8:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e3cf      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ea      	bne.n	80031ca <HAL_RCC_OscConfig+0x1da>
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d07e      	beq.n	8003302 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b08      	cmp	r3, #8
 8003208:	d005      	beq.n	8003216 <HAL_RCC_OscConfig+0x226>
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d10e      	bne.n	800322e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d10b      	bne.n	800322e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d06e      	beq.n	8003300 <HAL_RCC_OscConfig+0x310>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d16a      	bne.n	8003300 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e3ac      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x256>
 8003238:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0b      	ldr	r2, [pc, #44]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 800323e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e024      	b.n	8003290 <HAL_RCC_OscConfig+0x2a0>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324e:	d113      	bne.n	8003278 <HAL_RCC_OscConfig+0x288>
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a02      	ldr	r2, [pc, #8]	; (800326c <HAL_RCC_OscConfig+0x27c>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e012      	b.n	8003290 <HAL_RCC_OscConfig+0x2a0>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	20000004 	.word	0x20000004
 8003274:	20000008 	.word	0x20000008
 8003278:	4b8b      	ldr	r3, [pc, #556]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a8a      	ldr	r2, [pc, #552]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a87      	ldr	r2, [pc, #540]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d019      	beq.n	80032cc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe f9ee 	bl	8001678 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800329e:	e00e      	b.n	80032be <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe f9ea 	bl	8001678 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d907      	bls.n	80032be <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	4b7e      	ldr	r3, [pc, #504]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e364      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032be:	4b7a      	ldr	r3, [pc, #488]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ea      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2b0>
 80032ca:	e01a      	b.n	8003302 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe f9d4 	bl	8001678 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d2:	e00e      	b.n	80032f2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fe f9d0 	bl	8001678 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	; 0x64
 80032e0:	d907      	bls.n	80032f2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032e2:	4b71      	ldr	r3, [pc, #452]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e34a      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1ea      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2e4>
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d06c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d005      	beq.n	8003320 <HAL_RCC_OscConfig+0x330>
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d119      	bne.n	800334e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d116      	bne.n	800334e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x348>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e327      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	061b      	lsls	r3, r3, #24
 8003346:	4958      	ldr	r1, [pc, #352]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334c:	e04c      	b.n	80033e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d029      	beq.n	80033aa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003356:	4b54      	ldr	r3, [pc, #336]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a53      	ldr	r2, [pc, #332]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800335c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe f989 	bl	8001678 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003368:	e00e      	b.n	8003388 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe f985 	bl	8001678 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d907      	bls.n	8003388 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003378:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e2ff      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0ea      	beq.n	800336a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	4941      	ldr	r1, [pc, #260]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	e01e      	b.n	80033e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3e      	ldr	r2, [pc, #248]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fe f95f 	bl	8001678 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033bc:	e00e      	b.n	80033dc <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7fe f95b 	bl	8001678 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d907      	bls.n	80033dc <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e2d5      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033dc:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ea      	bne.n	80033be <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d062      	beq.n	80034ba <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d038      	beq.n	800346e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340a:	4a27      	ldr	r2, [pc, #156]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800340c:	f023 0310 	bic.w	r3, r3, #16
 8003410:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003414:	e007      	b.n	8003426 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800341e:	f043 0310 	orr.w	r3, r3, #16
 8003422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fe f91f 	bl	8001678 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800343c:	e00f      	b.n	800345e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343e:	f7fe f91b 	bl	8001678 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b07      	cmp	r3, #7
 800344a:	d908      	bls.n	800345e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e294      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0e8      	beq.n	800343e <HAL_RCC_OscConfig+0x44e>
 800346c:	e025      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fe f8fb 	bl	8001678 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003484:	e012      	b.n	80034ac <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe f8f7 	bl	8001678 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b07      	cmp	r3, #7
 8003492:	d90b      	bls.n	80034ac <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_RCC_OscConfig+0x4b8>)
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e270      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ac:	4ba8      	ldr	r3, [pc, #672]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80034ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1e5      	bne.n	8003486 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 812d 	beq.w	8003722 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c8:	2300      	movs	r3, #0
 80034ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034cc:	4ba0      	ldr	r3, [pc, #640]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d8:	4b9d      	ldr	r3, [pc, #628]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4a9c      	ldr	r2, [pc, #624]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	4b9a      	ldr	r3, [pc, #616]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f0:	2301      	movs	r3, #1
 80034f2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f4:	4b97      	ldr	r3, [pc, #604]	; (8003754 <HAL_RCC_OscConfig+0x764>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d11e      	bne.n	800353e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003500:	4b94      	ldr	r3, [pc, #592]	; (8003754 <HAL_RCC_OscConfig+0x764>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a93      	ldr	r2, [pc, #588]	; (8003754 <HAL_RCC_OscConfig+0x764>)
 8003506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350c:	f7fe f8b4 	bl	8001678 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003512:	e00e      	b.n	8003532 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003514:	f7fe f8b0 	bl	8001678 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d907      	bls.n	8003532 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003522:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <HAL_RCC_OscConfig+0x764>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e22a      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003532:	4b88      	ldr	r3, [pc, #544]	; (8003754 <HAL_RCC_OscConfig+0x764>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ea      	beq.n	8003514 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01f      	beq.n	800358a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003556:	4b7e      	ldr	r3, [pc, #504]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	4a7c      	ldr	r2, [pc, #496]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003566:	4b7a      	ldr	r3, [pc, #488]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	4a78      	ldr	r2, [pc, #480]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003576:	e018      	b.n	80035aa <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003578:	4b75      	ldr	r3, [pc, #468]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800357a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357e:	4a74      	ldr	r2, [pc, #464]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003588:	e00f      	b.n	80035aa <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800358a:	4b71      	ldr	r3, [pc, #452]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	4a6f      	ldr	r2, [pc, #444]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800359a:	4b6d      	ldr	r3, [pc, #436]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	4a6b      	ldr	r2, [pc, #428]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80035a2:	f023 0304 	bic.w	r3, r3, #4
 80035a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d068      	beq.n	8003684 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fe f861 	bl	8001678 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b8:	e011      	b.n	80035de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe f85d 	bl	8001678 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d908      	bls.n	80035de <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035cc:	4b60      	ldr	r3, [pc, #384]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1d4      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035de:	4b5c      	ldr	r3, [pc, #368]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0e6      	beq.n	80035ba <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d022      	beq.n	800363e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80035f8:	4b55      	ldr	r3, [pc, #340]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a54      	ldr	r2, [pc, #336]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003608:	e011      	b.n	800362e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7fe f835 	bl	8001678 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d908      	bls.n	800362e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800361c:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1ac      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0e6      	beq.n	800360a <HAL_RCC_OscConfig+0x61a>
 800363c:	e068      	b.n	8003710 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800363e:	4b44      	ldr	r3, [pc, #272]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	4a42      	ldr	r2, [pc, #264]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800364e:	e011      	b.n	8003674 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fe f812 	bl	8001678 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d908      	bls.n	8003674 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e189      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003674:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e6      	bne.n	8003650 <HAL_RCC_OscConfig+0x660>
 8003682:	e045      	b.n	8003710 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fd fff8 	bl	8001678 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800368a:	e011      	b.n	80036b0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fd fff4 	bl	8001678 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d908      	bls.n	80036b0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800369e:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e16b      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036b0:	4b27      	ldr	r3, [pc, #156]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e6      	bne.n	800368c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80036be:	4b24      	ldr	r3, [pc, #144]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d021      	beq.n	8003710 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036cc:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80036d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036dc:	e011      	b.n	8003702 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fd ffcb 	bl	8001678 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d908      	bls.n	8003702 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e142      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003702:	4b13      	ldr	r3, [pc, #76]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003710:	7ffb      	ldrb	r3, [r7, #31]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d04f      	beq.n	80037ce <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	d028      	beq.n	8003788 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 8003738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_RCC_OscConfig+0x760>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fd ff97 	bl	8001678 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800374c:	e014      	b.n	8003778 <HAL_RCC_OscConfig+0x788>
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003758:	f7fd ff8e 	bl	8001678 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d908      	bls.n	8003778 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003766:	4b8a      	ldr	r3, [pc, #552]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e107      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003778:	4b85      	ldr	r3, [pc, #532]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 800377a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0e8      	beq.n	8003758 <HAL_RCC_OscConfig+0x768>
 8003786:	e022      	b.n	80037ce <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003788:	4b81      	ldr	r3, [pc, #516]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 800378a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378e:	4a80      	ldr	r2, [pc, #512]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd ff6e 	bl	8001678 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800379e:	e00f      	b.n	80037c0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a0:	f7fd ff6a 	bl	8001678 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d908      	bls.n	80037c0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037ae:	4b78      	ldr	r3, [pc, #480]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80037b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0e3      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c0:	4b73      	ldr	r3, [pc, #460]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80037c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e8      	bne.n	80037a0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80d7 	beq.w	8003986 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037d8:	4b6d      	ldr	r3, [pc, #436]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	f000 8091 	beq.w	8003908 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d166      	bne.n	80038bc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b68      	ldr	r3, [pc, #416]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a67      	ldr	r2, [pc, #412]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80037f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd ff3d 	bl	8001678 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	e00e      	b.n	8003820 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003802:	f7fd ff39 	bl	8001678 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d907      	bls.n	8003820 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003810:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0b3      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ea      	bne.n	8003802 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382c:	4b58      	ldr	r3, [pc, #352]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4b58      	ldr	r3, [pc, #352]	; (8003994 <HAL_RCC_OscConfig+0x9a4>)
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800383c:	3a01      	subs	r2, #1
 800383e:	0112      	lsls	r2, r2, #4
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003846:	0212      	lsls	r2, r2, #8
 8003848:	4311      	orrs	r1, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800384e:	0852      	lsrs	r2, r2, #1
 8003850:	3a01      	subs	r2, #1
 8003852:	0552      	lsls	r2, r2, #21
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0652      	lsls	r2, r2, #25
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003866:	06d2      	lsls	r2, r2, #27
 8003868:	430a      	orrs	r2, r1
 800386a:	4949      	ldr	r1, [pc, #292]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003870:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a46      	ldr	r2, [pc, #280]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800387c:	4b44      	ldr	r3, [pc, #272]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a43      	ldr	r2, [pc, #268]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003886:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd fef6 	bl	8001678 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388e:	e00e      	b.n	80038ae <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fd fef2 	bl	8001678 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d907      	bls.n	80038ae <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389e:	4b3c      	ldr	r3, [pc, #240]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e06c      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0ea      	beq.n	8003890 <HAL_RCC_OscConfig+0x8a0>
 80038ba:	e064      	b.n	8003986 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b34      	ldr	r3, [pc, #208]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a33      	ldr	r2, [pc, #204]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd fed6 	bl	8001678 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ce:	e00e      	b.n	80038ee <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd fed2 	bl	8001678 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d907      	bls.n	80038ee <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e04c      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1ea      	bne.n	80038d0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038fa:	4b25      	ldr	r3, [pc, #148]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	4924      	ldr	r1, [pc, #144]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <HAL_RCC_OscConfig+0x9a8>)
 8003902:	4013      	ands	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
 8003906:	e03e      	b.n	8003986 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e039      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <HAL_RCC_OscConfig+0x9a0>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0203 	and.w	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	429a      	cmp	r2, r3
 8003926:	d12c      	bne.n	8003982 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	3b01      	subs	r3, #1
 8003934:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d123      	bne.n	8003982 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d11b      	bne.n	8003982 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d113      	bne.n	8003982 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d109      	bne.n	8003982 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3720      	adds	r7, #32
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	019f800c 	.word	0x019f800c
 8003998:	feeefffc 	.word	0xfeeefffc

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e11c      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b90      	ldr	r3, [pc, #576]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d910      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b8d      	ldr	r3, [pc, #564]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 020f 	bic.w	r2, r3, #15
 80039ca:	498b      	ldr	r1, [pc, #556]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e104      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d010      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d908      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b7e      	ldr	r3, [pc, #504]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	497b      	ldr	r1, [pc, #492]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8085 	beq.w	8003b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d11f      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a28:	4b74      	ldr	r3, [pc, #464]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0da      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a38:	f000 fa26 	bl	8003e88 <RCC_GetSysClockFreqFromPLLSource>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4a6f      	ldr	r2, [pc, #444]	; (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d947      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a46:	4b6d      	ldr	r3, [pc, #436]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d141      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a52:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5a:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e036      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a70:	4b62      	ldr	r3, [pc, #392]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e0b6      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a88:	4b5c      	ldr	r3, [pc, #368]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0aa      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a98:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0a2      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003aa8:	f000 f8b0 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <HAL_RCC_ClockConfig+0x264>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d90f      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ab6:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ac2:	4b4e      	ldr	r3, [pc, #312]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aca:	4a4c      	ldr	r2, [pc, #304]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ad6:	4b49      	ldr	r3, [pc, #292]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f023 0203 	bic.w	r2, r3, #3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	4946      	ldr	r1, [pc, #280]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ae8:	f7fd fdc6 	bl	8001678 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	e013      	b.n	8003b18 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af0:	f7fd fdc2 	bl	8001678 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d90a      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 020c 	and.w	r2, r3, #12
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e06a      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b18:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 020c 	and.w	r2, r3, #12
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d1e2      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b3a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d208      	bcs.n	8003b6a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b28      	ldr	r3, [pc, #160]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4925      	ldr	r1, [pc, #148]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d210      	bcs.n	8003b9a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b78:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 020f 	bic.w	r2, r3, #15
 8003b80:	491d      	ldr	r1, [pc, #116]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_ClockConfig+0x25c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e029      	b.n	8003bee <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4912      	ldr	r1, [pc, #72]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	490a      	ldr	r1, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bd8:	f000 f8b6 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x268>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd fcf6 	bl	80015d8 <HAL_InitTick>
 8003bec:	4603      	mov	r3, r0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	04c4b400 	.word	0x04c4b400
 8003c04:	20000004 	.word	0x20000004
 8003c08:	20000008 	.word	0x20000008

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b089      	sub	sp, #36	; 0x24
 8003c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c24:	4b44      	ldr	r3, [pc, #272]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x34>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d121      	bne.n	8003c7e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d11e      	bne.n	8003c7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c40:	4b3d      	ldr	r3, [pc, #244]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c4c:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	e005      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c5c:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003c68:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x130>)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c70:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10d      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d102      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c84:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	e004      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c90:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x138>)
 8003c92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d146      	bne.n	8003d28 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	3301      	adds	r3, #1
 8003cb0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d003      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xb4>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d00d      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0xce>
 8003cbe:	e019      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x134>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cca:	68d2      	ldr	r2, [r2, #12]
 8003ccc:	0a12      	lsrs	r2, r2, #8
 8003cce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	617b      	str	r3, [r7, #20]
        break;
 8003cd8:	e019      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cda:	4a1a      	ldr	r2, [pc, #104]	; (8003d44 <HAL_RCC_GetSysClockFreq+0x138>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	4a15      	ldr	r2, [pc, #84]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	0a12      	lsrs	r2, r2, #8
 8003ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cec:	fb02 f303 	mul.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
        break;
 8003cf2:	e00c      	b.n	8003d0e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003cfe:	68d2      	ldr	r2, [r2, #12]
 8003d00:	0a12      	lsrs	r2, r2, #8
 8003d02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d06:	fb02 f303 	mul.w	r3, r2, r3
 8003d0a:	617b      	str	r3, [r7, #20]
        break;
 8003d0c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	0e5b      	lsrs	r3, r3, #25
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d28:	69bb      	ldr	r3, [r7, #24]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	0800762c 	.word	0x0800762c
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	007a1200 	.word	0x007a1200

08003d48 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003d4c:	f7ff ff5e 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08007614 	.word	0x08007614

08003d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d74:	f7ff ffe8 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08007624 	.word	0x08007624

08003d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d9c:	f7ff ffd4 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	0adb      	lsrs	r3, r3, #11
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	4903      	ldr	r1, [pc, #12]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dae:	5ccb      	ldrb	r3, [r1, r3]
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	08007624 	.word	0x08007624

08003dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dcc:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dd8:	f7ff f86c 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
 8003ddc:	6138      	str	r0, [r7, #16]
 8003dde:	e014      	b.n	8003e0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dea:	6593      	str	r3, [r2, #88]	; 0x58
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003df8:	f7ff f85c 	bl	8002eb4 <HAL_PWREx_GetVoltageRange>
 8003dfc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e16:	d10b      	bne.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b80      	cmp	r3, #128	; 0x80
 8003e1c:	d919      	bls.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2ba0      	cmp	r3, #160	; 0xa0
 8003e22:	d902      	bls.n	8003e2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e24:	2302      	movs	r3, #2
 8003e26:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003e28:	e013      	b.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003e2e:	e010      	b.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d902      	bls.n	8003e3c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e36:	2303      	movs	r3, #3
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	e00a      	b.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b80      	cmp	r3, #128	; 0x80
 8003e40:	d102      	bne.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e42:	2302      	movs	r3, #2
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e004      	b.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b70      	cmp	r3, #112	; 0x70
 8003e4c:	d101      	bne.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 020f 	bic.w	r2, r3, #15
 8003e5a:	490a      	ldr	r1, [pc, #40]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40022000 	.word	0x40022000

08003e88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e98:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d015      	beq.n	8003ed8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d839      	bhi.n	8003f26 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d01c      	beq.n	8003ef2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d133      	bne.n	8003f26 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ebe:	4a26      	ldr	r2, [pc, #152]	; (8003f58 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ec8:	68d2      	ldr	r2, [r2, #12]
 8003eca:	0a12      	lsrs	r2, r2, #8
 8003ecc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ed0:	fb02 f303 	mul.w	r3, r2, r3
 8003ed4:	613b      	str	r3, [r7, #16]
      break;
 8003ed6:	e029      	b.n	8003f2c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ed8:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ee2:	68d2      	ldr	r2, [r2, #12]
 8003ee4:	0a12      	lsrs	r2, r2, #8
 8003ee6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	613b      	str	r3, [r7, #16]
      break;
 8003ef0:	e01c      	b.n	8003f2c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d107      	bne.n	8003f0e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e005      	b.n	8003f1a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	091b      	lsrs	r3, r3, #4
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003f1a:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f22:	613b      	str	r3, [r7, #16]
        break;
 8003f24:	e002      	b.n	8003f2c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
      break;
 8003f2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	0e5b      	lsrs	r3, r3, #25
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	3301      	adds	r3, #1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f46:	683b      	ldr	r3, [r7, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40021000 	.word	0x40021000
 8003f58:	00f42400 	.word	0x00f42400
 8003f5c:	007a1200 	.word	0x007a1200
 8003f60:	0800762c 	.word	0x0800762c

08003f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f70:	2300      	movs	r3, #0
 8003f72:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d040      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f84:	2b80      	cmp	r3, #128	; 0x80
 8003f86:	d02a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d825      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f8c:	2b60      	cmp	r3, #96	; 0x60
 8003f8e:	d026      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f90:	2b60      	cmp	r3, #96	; 0x60
 8003f92:	d821      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d006      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d81d      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003fa4:	e018      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa6:	4b8f      	ldr	r3, [pc, #572]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4a8e      	ldr	r2, [pc, #568]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fb2:	e015      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb56 	bl	800466c <RCCEx_PLLSAI1_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fc4:	e00c      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3320      	adds	r3, #32
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fc33 	bl	8004838 <RCCEx_PLLSAI2_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fd6:	e003      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77fb      	strb	r3, [r7, #31]
        break;
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe0:	7ffb      	ldrb	r3, [r7, #31]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fec:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ff4:	497b      	ldr	r1, [pc, #492]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ffc:	e001      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	7ffb      	ldrb	r3, [r7, #31]
 8004000:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d047      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004016:	d030      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401c:	d82a      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800401e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004022:	d02a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004024:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004028:	d824      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800402a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402e:	d008      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d81e      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800403a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403e:	d010      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004040:	e018      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004042:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4a67      	ldr	r2, [pc, #412]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800404e:	e015      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fb08 	bl	800466c <RCCEx_PLLSAI1_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004060:	e00c      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3320      	adds	r3, #32
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fbe5 	bl	8004838 <RCCEx_PLLSAI2_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	77fb      	strb	r3, [r7, #31]
        break;
 8004078:	e000      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800407a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407c:	7ffb      	ldrb	r3, [r7, #31]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004082:	4b58      	ldr	r3, [pc, #352]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004090:	4954      	ldr	r1, [pc, #336]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004098:	e001      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80ab 	beq.w	8004202 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ac:	2300      	movs	r3, #0
 80040ae:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b0:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b49      	ldr	r3, [pc, #292]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	4a48      	ldr	r2, [pc, #288]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
 80040c8:	4b46      	ldr	r3, [pc, #280]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d8:	4b43      	ldr	r3, [pc, #268]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a42      	ldr	r2, [pc, #264]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e4:	f7fd fac8 	bl	8001678 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ea:	e00f      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ec:	f7fd fac4 	bl	8001678 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d908      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800410a:	e006      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800410c:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e9      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800411a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800411c:	7ffb      	ldrb	r3, [r7, #31]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d164      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004122:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01f      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	429a      	cmp	r2, r3
 800413e:	d019      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004140:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	4a24      	ldr	r2, [pc, #144]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800415c:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01f      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417e:	f7fd fa7b 	bl	8001678 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004184:	e012      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fd fa77 	bl	8001678 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d909      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80041aa:	e007      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ac:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0e5      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80041bc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80041be:	7ffb      	ldrb	r3, [r7, #31]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10c      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041c4:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d4:	4903      	ldr	r1, [pc, #12]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041dc:	e008      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041de:	7ffb      	ldrb	r3, [r7, #31]
 80041e0:	77bb      	strb	r3, [r7, #30]
 80041e2:	e005      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	7ffb      	ldrb	r3, [r7, #31]
 80041ee:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d105      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b9c      	ldr	r3, [pc, #624]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	4a9b      	ldr	r2, [pc, #620]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800420e:	4b96      	ldr	r3, [pc, #600]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f023 0203 	bic.w	r2, r3, #3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	4992      	ldr	r1, [pc, #584]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004230:	4b8d      	ldr	r3, [pc, #564]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	f023 020c 	bic.w	r2, r3, #12
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	498a      	ldr	r1, [pc, #552]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004252:	4b85      	ldr	r3, [pc, #532]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004258:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004260:	4981      	ldr	r1, [pc, #516]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004274:	4b7c      	ldr	r3, [pc, #496]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4979      	ldr	r1, [pc, #484]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004296:	4b74      	ldr	r3, [pc, #464]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	4970      	ldr	r1, [pc, #448]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042b8:	4b6b      	ldr	r3, [pc, #428]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	4968      	ldr	r1, [pc, #416]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	495f      	ldr	r1, [pc, #380]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042fc:	4b5a      	ldr	r3, [pc, #360]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	4957      	ldr	r1, [pc, #348]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800431e:	4b52      	ldr	r3, [pc, #328]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432c:	494e      	ldr	r1, [pc, #312]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d031      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004344:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004348:	d00e      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800434a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434e:	d814      	bhi.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d015      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004358:	d10f      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800435a:	4b43      	ldr	r3, [pc, #268]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4a42      	ldr	r2, [pc, #264]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004364:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004366:	e00c      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f97c 	bl	800466c <RCCEx_PLLSAI1_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004378:	e003      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	77fb      	strb	r3, [r7, #31]
        break;
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	7ffb      	ldrb	r3, [r7, #31]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004388:	4b37      	ldr	r3, [pc, #220]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004396:	4934      	ldr	r1, [pc, #208]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800439e:	e001      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
 80043a2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043be:	492a      	ldr	r1, [pc, #168]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e0:	4921      	ldr	r1, [pc, #132]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043f4:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	4919      	ldr	r1, [pc, #100]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004416:	4b14      	ldr	r3, [pc, #80]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800441c:	f023 0203 	bic.w	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	4910      	ldr	r1, [pc, #64]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02b      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	4908      	ldr	r1, [pc, #32]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004456:	d109      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a02      	ldr	r2, [pc, #8]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800445e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004462:	60d3      	str	r3, [r2, #12]
 8004464:	e014      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f8f5 	bl	800466c <RCCEx_PLLSAI1_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d04a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044a4:	d108      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80044a6:	4b70      	ldr	r3, [pc, #448]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ac:	4a6e      	ldr	r2, [pc, #440]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80044b6:	e012      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80044b8:	4b6b      	ldr	r3, [pc, #428]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c6:	4968      	ldr	r1, [pc, #416]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044ce:	4b66      	ldr	r3, [pc, #408]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044d4:	4a64      	ldr	r2, [pc, #400]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044e6:	d10d      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f8bc 	bl	800466c <RCCEx_PLLSAI1_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80044f8:	7ffb      	ldrb	r3, [r7, #31]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d019      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80044fe:	7ffb      	ldrb	r3, [r7, #31]
 8004500:	77bb      	strb	r3, [r7, #30]
 8004502:	e016      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800450c:	d106      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800450e:	4b56      	ldr	r3, [pc, #344]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	4a55      	ldr	r2, [pc, #340]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004518:	60d3      	str	r3, [r2, #12]
 800451a:	e00a      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004524:	d105      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004526:	4b50      	ldr	r3, [pc, #320]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a4f      	ldr	r2, [pc, #316]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d028      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800453e:	4b4a      	ldr	r3, [pc, #296]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800454c:	4946      	ldr	r1, [pc, #280]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800455c:	d106      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800455e:	4b42      	ldr	r3, [pc, #264]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4a41      	ldr	r2, [pc, #260]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004568:	60d3      	str	r3, [r2, #12]
 800456a:	e011      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004574:	d10c      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	2101      	movs	r1, #1
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f875 	bl	800466c <RCCEx_PLLSAI1_Config>
 8004582:	4603      	mov	r3, r0
 8004584:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004586:	7ffb      	ldrb	r3, [r7, #31]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800458c:	7ffb      	ldrb	r3, [r7, #31]
 800458e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01e      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ac:	492e      	ldr	r1, [pc, #184]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045be:	d10c      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2102      	movs	r1, #2
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f850 	bl	800466c <RCCEx_PLLSAI1_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ec:	f023 0204 	bic.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f6:	491c      	ldr	r1, [pc, #112]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800460a:	4b17      	ldr	r3, [pc, #92]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800460c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004610:	f023 0218 	bic.w	r2, r3, #24
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	4913      	ldr	r1, [pc, #76]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d017      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800462e:	4b0e      	ldr	r3, [pc, #56]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004630:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004634:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463e:	490a      	ldr	r1, [pc, #40]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004650:	d105      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4a04      	ldr	r2, [pc, #16]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800465e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000

0800466c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d018      	beq.n	80046b4 <RCCEx_PLLSAI1_Config+0x48>
 8004682:	2b03      	cmp	r3, #3
 8004684:	d81f      	bhi.n	80046c6 <RCCEx_PLLSAI1_Config+0x5a>
 8004686:	2b01      	cmp	r3, #1
 8004688:	d002      	beq.n	8004690 <RCCEx_PLLSAI1_Config+0x24>
 800468a:	2b02      	cmp	r3, #2
 800468c:	d009      	beq.n	80046a2 <RCCEx_PLLSAI1_Config+0x36>
 800468e:	e01a      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004690:	4b65      	ldr	r3, [pc, #404]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d117      	bne.n	80046cc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a0:	e014      	b.n	80046cc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046a2:	4b61      	ldr	r3, [pc, #388]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d110      	bne.n	80046d0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b2:	e00d      	b.n	80046d0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80046b4:	4b5c      	ldr	r3, [pc, #368]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c4:	e006      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
      break;
 80046ca:	e004      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80046cc:	bf00      	nop
 80046ce:	e002      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80046d0:	bf00      	nop
 80046d2:	e000      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80046d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 809f 	bne.w	800481c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046de:	4b52      	ldr	r3, [pc, #328]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a51      	ldr	r2, [pc, #324]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ea:	f7fc ffc5 	bl	8001678 <HAL_GetTick>
 80046ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046f0:	e00f      	b.n	8004712 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f2:	f7fc ffc1 	bl	8001678 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d908      	bls.n	8004712 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004700:	4b49      	ldr	r3, [pc, #292]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004710:	e006      	b.n	8004720 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004712:	4b45      	ldr	r3, [pc, #276]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e9      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0x86>
 800471e:	e000      	b.n	8004722 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004720:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d179      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d116      	bne.n	800475c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800472e:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004730:	691a      	ldr	r2, [r3, #16]
 8004732:	4b3e      	ldr	r3, [pc, #248]	; (800482c <RCCEx_PLLSAI1_Config+0x1c0>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	0211      	lsls	r1, r2, #8
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68d2      	ldr	r2, [r2, #12]
 8004740:	06d2      	lsls	r2, r2, #27
 8004742:	4311      	orrs	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6852      	ldr	r2, [r2, #4]
 8004748:	3a01      	subs	r2, #1
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	4311      	orrs	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	4934      	ldr	r1, [pc, #208]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004756:	4313      	orrs	r3, r2
 8004758:	610b      	str	r3, [r1, #16]
 800475a:	e033      	b.n	80047c4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d118      	bne.n	8004794 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004762:	4b31      	ldr	r3, [pc, #196]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	4b32      	ldr	r3, [pc, #200]	; (8004830 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	0211      	lsls	r1, r2, #8
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6912      	ldr	r2, [r2, #16]
 8004774:	0852      	lsrs	r2, r2, #1
 8004776:	3a01      	subs	r2, #1
 8004778:	0552      	lsls	r2, r2, #21
 800477a:	4311      	orrs	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	3a01      	subs	r2, #1
 8004782:	0112      	lsls	r2, r2, #4
 8004784:	4311      	orrs	r1, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	4926      	ldr	r1, [pc, #152]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	610b      	str	r3, [r1, #16]
 8004792:	e017      	b.n	80047c4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004794:	4b24      	ldr	r3, [pc, #144]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <RCCEx_PLLSAI1_Config+0x1c8>)
 800479a:	4013      	ands	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6892      	ldr	r2, [r2, #8]
 80047a0:	0211      	lsls	r1, r2, #8
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6952      	ldr	r2, [r2, #20]
 80047a6:	0852      	lsrs	r2, r2, #1
 80047a8:	3a01      	subs	r2, #1
 80047aa:	0652      	lsls	r2, r2, #25
 80047ac:	4311      	orrs	r1, r2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6852      	ldr	r2, [r2, #4]
 80047b2:	3a01      	subs	r2, #1
 80047b4:	0112      	lsls	r2, r2, #4
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	491a      	ldr	r1, [pc, #104]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047c4:	4b18      	ldr	r3, [pc, #96]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a17      	ldr	r2, [pc, #92]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fc ff52 	bl	8001678 <HAL_GetTick>
 80047d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047d6:	e00f      	b.n	80047f8 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047d8:	f7fc ff4e 	bl	8001678 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d908      	bls.n	80047f8 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80047f6:	e006      	b.n	8004806 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0e9      	beq.n	80047d8 <RCCEx_PLLSAI1_Config+0x16c>
 8004804:	e000      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004806:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4904      	ldr	r1, [pc, #16]	; (8004828 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004818:	4313      	orrs	r3, r2
 800481a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	07ff800c 	.word	0x07ff800c
 8004830:	ff9f800c 	.word	0xff9f800c
 8004834:	f9ff800c 	.word	0xf9ff800c

08004838 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d018      	beq.n	8004880 <RCCEx_PLLSAI2_Config+0x48>
 800484e:	2b03      	cmp	r3, #3
 8004850:	d81f      	bhi.n	8004892 <RCCEx_PLLSAI2_Config+0x5a>
 8004852:	2b01      	cmp	r3, #1
 8004854:	d002      	beq.n	800485c <RCCEx_PLLSAI2_Config+0x24>
 8004856:	2b02      	cmp	r3, #2
 8004858:	d009      	beq.n	800486e <RCCEx_PLLSAI2_Config+0x36>
 800485a:	e01a      	b.n	8004892 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485c:	4b4a      	ldr	r3, [pc, #296]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d117      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486c:	e014      	b.n	8004898 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800486e:	4b46      	ldr	r3, [pc, #280]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004876:	2b00      	cmp	r3, #0
 8004878:	d110      	bne.n	800489c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487e:	e00d      	b.n	800489c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004880:	4b41      	ldr	r3, [pc, #260]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e006      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	73fb      	strb	r3, [r7, #15]
      break;
 8004896:	e004      	b.n	80048a2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004898:	bf00      	nop
 800489a:	e002      	b.n	80048a2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80048a0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d169      	bne.n	800497c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048a8:	4b37      	ldr	r3, [pc, #220]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a36      	ldr	r2, [pc, #216]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 80048ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fc fee0 	bl	8001678 <HAL_GetTick>
 80048b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ba:	e00f      	b.n	80048dc <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048bc:	f7fc fedc 	bl	8001678 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d908      	bls.n	80048dc <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ca:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80048da:	e006      	b.n	80048ea <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048dc:	4b2a      	ldr	r3, [pc, #168]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e9      	bne.n	80048bc <RCCEx_PLLSAI2_Config+0x84>
 80048e8:	e000      	b.n	80048ec <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80048ea:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d144      	bne.n	800497c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d115      	bne.n	8004924 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f8:	4b23      	ldr	r3, [pc, #140]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	4b23      	ldr	r3, [pc, #140]	; (800498c <RCCEx_PLLSAI2_Config+0x154>)
 80048fe:	4013      	ands	r3, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6892      	ldr	r2, [r2, #8]
 8004904:	0211      	lsls	r1, r2, #8
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68d2      	ldr	r2, [r2, #12]
 800490a:	06d2      	lsls	r2, r2, #27
 800490c:	4311      	orrs	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6852      	ldr	r2, [r2, #4]
 8004912:	3a01      	subs	r2, #1
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	4311      	orrs	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	491a      	ldr	r1, [pc, #104]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 8004920:	4313      	orrs	r3, r2
 8004922:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004924:	4b18      	ldr	r3, [pc, #96]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a17      	ldr	r2, [pc, #92]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004930:	f7fc fea2 	bl	8001678 <HAL_GetTick>
 8004934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004936:	e00f      	b.n	8004958 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004938:	f7fc fe9e 	bl	8001678 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d908      	bls.n	8004958 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004956:	e006      	b.n	8004966 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0e9      	beq.n	8004938 <RCCEx_PLLSAI2_Config+0x100>
 8004964:	e000      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004966:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	4904      	ldr	r1, [pc, #16]	; (8004988 <RCCEx_PLLSAI2_Config+0x150>)
 8004978:	4313      	orrs	r3, r2
 800497a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	07ff800c 	.word	0x07ff800c

08004990 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d066      	beq.n	8004a70 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc fb54 	bl	8001064 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d045      	beq.n	8004a5e <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049d2:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_RTC_Init+0xec>)
 80049d4:	22ca      	movs	r2, #202	; 0xca
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24
 80049d8:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <HAL_RTC_Init+0xec>)
 80049da:	2253      	movs	r2, #83	; 0x53
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f872 	bl	8004ac8 <RTC_EnterInitMode>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d121      	bne.n	8004a32 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80049ee:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <HAL_RTC_Init+0xec>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <HAL_RTC_Init+0xec>)
 80049f4:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80049f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fc:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_RTC_Init+0xec>)
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6859      	ldr	r1, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	4319      	orrs	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	491a      	ldr	r1, [pc, #104]	; (8004a7c <HAL_RTC_Init+0xec>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	4916      	ldr	r1, [pc, #88]	; (8004a7c <HAL_RTC_Init+0xec>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f881 	bl	8004b30 <RTC_ExitInitMode>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10e      	bne.n	8004a56 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004a38:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <HAL_RTC_Init+0xec>)
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a19      	ldr	r1, [r3, #32]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4319      	orrs	r1, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	490a      	ldr	r1, [pc, #40]	; (8004a7c <HAL_RTC_Init+0xec>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RTC_Init+0xec>)
 8004a58:	22ff      	movs	r2, #255	; 0xff
 8004a5a:	625a      	str	r2, [r3, #36]	; 0x24
 8004a5c:	e001      	b.n	8004a62 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40002800 	.word	0x40002800

08004a80 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RTC_WaitForSynchro+0x40>)
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <HAL_RTC_WaitForSynchro+0x44>)
 8004a8c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004a8e:	f7fc fdf3 	bl	8001678 <HAL_GetTick>
 8004a92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004a94:	e009      	b.n	8004aaa <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a96:	f7fc fdef 	bl	8001678 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa4:	d901      	bls.n	8004aaa <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e006      	b.n	8004ab8 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RTC_WaitForSynchro+0x40>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ef      	beq.n	8004a96 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40002800 	.word	0x40002800
 8004ac4:	0001005c 	.word	0x0001005c

08004ac8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004ad4:	4b15      	ldr	r3, [pc, #84]	; (8004b2c <RTC_EnterInitMode+0x64>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d120      	bne.n	8004b22 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <RTC_EnterInitMode+0x64>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <RTC_EnterInitMode+0x64>)
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004aec:	f7fc fdc4 	bl	8001678 <HAL_GetTick>
 8004af0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004af2:	e00d      	b.n	8004b10 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004af4:	f7fc fdc0 	bl	8001678 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b02:	d905      	bls.n	8004b10 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <RTC_EnterInitMode+0x64>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <RTC_EnterInitMode+0x5a>
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d1e8      	bne.n	8004af4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40002800 	.word	0x40002800

08004b30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <RTC_ExitInitMode+0x78>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a19      	ldr	r2, [pc, #100]	; (8004ba8 <RTC_ExitInitMode+0x78>)
 8004b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b46:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <RTC_ExitInitMode+0x78>)
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10c      	bne.n	8004b6e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ff93 	bl	8004a80 <HAL_RTC_WaitForSynchro>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01e      	beq.n	8004b9e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2203      	movs	r2, #3
 8004b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	73fb      	strb	r3, [r7, #15]
 8004b6c:	e017      	b.n	8004b9e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <RTC_ExitInitMode+0x78>)
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	4a0d      	ldr	r2, [pc, #52]	; (8004ba8 <RTC_ExitInitMode+0x78>)
 8004b74:	f023 0320 	bic.w	r3, r3, #32
 8004b78:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff ff80 	bl	8004a80 <HAL_RTC_WaitForSynchro>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <RTC_ExitInitMode+0x78>)
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <RTC_ExitInitMode+0x78>)
 8004b98:	f043 0320 	orr.w	r3, r3, #32
 8004b9c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40002800 	.word	0x40002800

08004bac <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	490f      	ldr	r1, [pc, #60]	; (8004bfc <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	490c      	ldr	r1, [pc, #48]	; (8004c00 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6919      	ldr	r1, [r3, #16]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	430b      	orrs	r3, r1
 8004be6:	4906      	ldr	r1, [pc, #24]	; (8004c00 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40002800 	.word	0x40002800
 8004c00:	40003400 	.word	0x40003400

08004c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e049      	b.n	8004caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fa58 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f000 fa38 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0202 	mvn.w	r2, #2
 8004ce6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f9bc 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004d02:	e005      	b.n	8004d10 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f9ae 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9bf 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01b      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0204 	mvn.w	r2, #4
 8004d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f996 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004d4e:	e005      	b.n	8004d5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f988 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f999 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01b      	beq.n	8004dae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f06f 0208 	mvn.w	r2, #8
 8004d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2204      	movs	r2, #4
 8004d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f003 0303 	and.w	r3, r3, #3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f970 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004d9a:	e005      	b.n	8004da8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f962 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f973 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01b      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0210 	mvn.w	r2, #16
 8004dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2208      	movs	r2, #8
 8004dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f94a 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004de6:	e005      	b.n	8004df4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f93c 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f94d 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0201 	mvn.w	r2, #1
 8004e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f91a 	bl	8005052 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00c      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fb0a 	bl	8005460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb02 	bl	8005474 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f907 	bl	80050a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0220 	mvn.w	r2, #32
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 faca 	bl	800544c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_ConfigClockSource+0x1c>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e0b6      	b.n	800504a <HAL_TIM_ConfigClockSource+0x18a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f18:	d03e      	beq.n	8004f98 <HAL_TIM_ConfigClockSource+0xd8>
 8004f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1e:	f200 8087 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	f000 8086 	beq.w	8005036 <HAL_TIM_ConfigClockSource+0x176>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d87f      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f30:	2b70      	cmp	r3, #112	; 0x70
 8004f32:	d01a      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0xaa>
 8004f34:	2b70      	cmp	r3, #112	; 0x70
 8004f36:	d87b      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f38:	2b60      	cmp	r3, #96	; 0x60
 8004f3a:	d050      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x11e>
 8004f3c:	2b60      	cmp	r3, #96	; 0x60
 8004f3e:	d877      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f40:	2b50      	cmp	r3, #80	; 0x50
 8004f42:	d03c      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xfe>
 8004f44:	2b50      	cmp	r3, #80	; 0x50
 8004f46:	d873      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d058      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x13e>
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d86f      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d064      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15e>
 8004f54:	2b30      	cmp	r3, #48	; 0x30
 8004f56:	d86b      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d060      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15e>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d867      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d05c      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15e>
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d05a      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15e>
 8004f68:	e062      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	f000 f9bf 	bl	80052fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	609a      	str	r2, [r3, #8]
      break;
 8004f96:	e04f      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	f000 f9a8 	bl	80052fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fba:	609a      	str	r2, [r3, #8]
      break;
 8004fbc:	e03c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 f91a 	bl	8005204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2150      	movs	r1, #80	; 0x50
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f973 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e02c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 f939 	bl	8005262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2160      	movs	r1, #96	; 0x60
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f963 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e01c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	461a      	mov	r2, r3
 800500c:	f000 f8fa 	bl	8005204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f953 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 800501c:	e00c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f000 f94a 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 800502e:	e003      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e000      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a46      	ldr	r2, [pc, #280]	; (80051e4 <TIM_Base_SetConfig+0x12c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d00f      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a43      	ldr	r2, [pc, #268]	; (80051e8 <TIM_Base_SetConfig+0x130>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a42      	ldr	r2, [pc, #264]	; (80051ec <TIM_Base_SetConfig+0x134>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a41      	ldr	r2, [pc, #260]	; (80051f0 <TIM_Base_SetConfig+0x138>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a40      	ldr	r2, [pc, #256]	; (80051f4 <TIM_Base_SetConfig+0x13c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a35      	ldr	r2, [pc, #212]	; (80051e4 <TIM_Base_SetConfig+0x12c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01f      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d01b      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a32      	ldr	r2, [pc, #200]	; (80051e8 <TIM_Base_SetConfig+0x130>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d017      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a31      	ldr	r2, [pc, #196]	; (80051ec <TIM_Base_SetConfig+0x134>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a30      	ldr	r2, [pc, #192]	; (80051f0 <TIM_Base_SetConfig+0x138>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00f      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a2f      	ldr	r2, [pc, #188]	; (80051f4 <TIM_Base_SetConfig+0x13c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a2e      	ldr	r2, [pc, #184]	; (80051f8 <TIM_Base_SetConfig+0x140>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <TIM_Base_SetConfig+0x144>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_Base_SetConfig+0x9a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <TIM_Base_SetConfig+0x148>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d108      	bne.n	8005164 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <TIM_Base_SetConfig+0x12c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00f      	beq.n	80051b0 <TIM_Base_SetConfig+0xf8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <TIM_Base_SetConfig+0x13c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00b      	beq.n	80051b0 <TIM_Base_SetConfig+0xf8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <TIM_Base_SetConfig+0x140>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d007      	beq.n	80051b0 <TIM_Base_SetConfig+0xf8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <TIM_Base_SetConfig+0x144>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0xf8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a15      	ldr	r2, [pc, #84]	; (8005200 <TIM_Base_SetConfig+0x148>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d103      	bne.n	80051b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d105      	bne.n	80051d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	611a      	str	r2, [r3, #16]
  }
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800
 80051f0:	40000c00 	.word	0x40000c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40014400 	.word	0x40014400
 8005200:	40014800 	.word	0x40014800

08005204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 030a 	bic.w	r3, r3, #10
 8005240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005262:	b480      	push	{r7}
 8005264:	b087      	sub	sp, #28
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f023 0210 	bic.w	r2, r3, #16
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800528c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	031b      	lsls	r3, r3, #12
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800529e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f043 0307 	orr.w	r3, r3, #7
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005316:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	431a      	orrs	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4313      	orrs	r3, r2
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	609a      	str	r2, [r3, #8]
}
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005350:	2302      	movs	r3, #2
 8005352:	e068      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2e      	ldr	r2, [pc, #184]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800538e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a13      	ldr	r2, [pc, #76]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a14      	ldr	r2, [pc, #80]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40014000 	.word	0x40014000

0800544c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e042      	b.n	8005520 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fb fd79 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2224      	movs	r2, #36	; 0x24
 80054b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fb28 	bl	8005b28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f825 	bl	8005528 <UART_SetConfig>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e01b      	b.n	8005520 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fba7 	bl	8005c6c <UART_CheckIdleState>
 800551e:	4603      	mov	r3, r0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800552c:	b08c      	sub	sp, #48	; 0x30
 800552e:	af00      	add	r7, sp, #0
 8005530:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	431a      	orrs	r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	431a      	orrs	r2, r3
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	4313      	orrs	r3, r2
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4baa      	ldr	r3, [pc, #680]	; (8005800 <UART_SetConfig+0x2d8>)
 8005558:	4013      	ands	r3, r2
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005560:	430b      	orrs	r3, r1
 8005562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a9f      	ldr	r2, [pc, #636]	; (8005804 <UART_SetConfig+0x2dc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005590:	4313      	orrs	r3, r2
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800559e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	f023 010f 	bic.w	r1, r3, #15
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a90      	ldr	r2, [pc, #576]	; (8005808 <UART_SetConfig+0x2e0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d125      	bne.n	8005618 <UART_SetConfig+0xf0>
 80055cc:	4b8f      	ldr	r3, [pc, #572]	; (800580c <UART_SetConfig+0x2e4>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d81a      	bhi.n	8005610 <UART_SetConfig+0xe8>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <UART_SetConfig+0xb8>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005601 	.word	0x08005601
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005609 	.word	0x08005609
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055f6:	e116      	b.n	8005826 <UART_SetConfig+0x2fe>
 80055f8:	2302      	movs	r3, #2
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fe:	e112      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005600:	2304      	movs	r3, #4
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005606:	e10e      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005608:	2308      	movs	r3, #8
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560e:	e10a      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005610:	2310      	movs	r3, #16
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005616:	e106      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a7c      	ldr	r2, [pc, #496]	; (8005810 <UART_SetConfig+0x2e8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d138      	bne.n	8005694 <UART_SetConfig+0x16c>
 8005622:	4b7a      	ldr	r3, [pc, #488]	; (800580c <UART_SetConfig+0x2e4>)
 8005624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005628:	f003 030c 	and.w	r3, r3, #12
 800562c:	2b0c      	cmp	r3, #12
 800562e:	d82d      	bhi.n	800568c <UART_SetConfig+0x164>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <UART_SetConfig+0x110>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800566d 	.word	0x0800566d
 800563c:	0800568d 	.word	0x0800568d
 8005640:	0800568d 	.word	0x0800568d
 8005644:	0800568d 	.word	0x0800568d
 8005648:	0800567d 	.word	0x0800567d
 800564c:	0800568d 	.word	0x0800568d
 8005650:	0800568d 	.word	0x0800568d
 8005654:	0800568d 	.word	0x0800568d
 8005658:	08005675 	.word	0x08005675
 800565c:	0800568d 	.word	0x0800568d
 8005660:	0800568d 	.word	0x0800568d
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005685 	.word	0x08005685
 800566c:	2300      	movs	r3, #0
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005672:	e0d8      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005674:	2302      	movs	r3, #2
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e0d4      	b.n	8005826 <UART_SetConfig+0x2fe>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005682:	e0d0      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568a:	e0cc      	b.n	8005826 <UART_SetConfig+0x2fe>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005692:	e0c8      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a5e      	ldr	r2, [pc, #376]	; (8005814 <UART_SetConfig+0x2ec>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d125      	bne.n	80056ea <UART_SetConfig+0x1c2>
 800569e:	4b5b      	ldr	r3, [pc, #364]	; (800580c <UART_SetConfig+0x2e4>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056a8:	2b30      	cmp	r3, #48	; 0x30
 80056aa:	d016      	beq.n	80056da <UART_SetConfig+0x1b2>
 80056ac:	2b30      	cmp	r3, #48	; 0x30
 80056ae:	d818      	bhi.n	80056e2 <UART_SetConfig+0x1ba>
 80056b0:	2b20      	cmp	r3, #32
 80056b2:	d00a      	beq.n	80056ca <UART_SetConfig+0x1a2>
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d814      	bhi.n	80056e2 <UART_SetConfig+0x1ba>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <UART_SetConfig+0x19a>
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d008      	beq.n	80056d2 <UART_SetConfig+0x1aa>
 80056c0:	e00f      	b.n	80056e2 <UART_SetConfig+0x1ba>
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c8:	e0ad      	b.n	8005826 <UART_SetConfig+0x2fe>
 80056ca:	2302      	movs	r3, #2
 80056cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d0:	e0a9      	b.n	8005826 <UART_SetConfig+0x2fe>
 80056d2:	2304      	movs	r3, #4
 80056d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d8:	e0a5      	b.n	8005826 <UART_SetConfig+0x2fe>
 80056da:	2308      	movs	r3, #8
 80056dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e0:	e0a1      	b.n	8005826 <UART_SetConfig+0x2fe>
 80056e2:	2310      	movs	r3, #16
 80056e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e8:	e09d      	b.n	8005826 <UART_SetConfig+0x2fe>
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4a      	ldr	r2, [pc, #296]	; (8005818 <UART_SetConfig+0x2f0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d125      	bne.n	8005740 <UART_SetConfig+0x218>
 80056f4:	4b45      	ldr	r3, [pc, #276]	; (800580c <UART_SetConfig+0x2e4>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005700:	d016      	beq.n	8005730 <UART_SetConfig+0x208>
 8005702:	2bc0      	cmp	r3, #192	; 0xc0
 8005704:	d818      	bhi.n	8005738 <UART_SetConfig+0x210>
 8005706:	2b80      	cmp	r3, #128	; 0x80
 8005708:	d00a      	beq.n	8005720 <UART_SetConfig+0x1f8>
 800570a:	2b80      	cmp	r3, #128	; 0x80
 800570c:	d814      	bhi.n	8005738 <UART_SetConfig+0x210>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <UART_SetConfig+0x1f0>
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d008      	beq.n	8005728 <UART_SetConfig+0x200>
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x210>
 8005718:	2300      	movs	r3, #0
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800571e:	e082      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005720:	2302      	movs	r3, #2
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005726:	e07e      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005728:	2304      	movs	r3, #4
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572e:	e07a      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005730:	2308      	movs	r3, #8
 8005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005736:	e076      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005738:	2310      	movs	r3, #16
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573e:	e072      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a35      	ldr	r2, [pc, #212]	; (800581c <UART_SetConfig+0x2f4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d12a      	bne.n	80057a0 <UART_SetConfig+0x278>
 800574a:	4b30      	ldr	r3, [pc, #192]	; (800580c <UART_SetConfig+0x2e4>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005758:	d01a      	beq.n	8005790 <UART_SetConfig+0x268>
 800575a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800575e:	d81b      	bhi.n	8005798 <UART_SetConfig+0x270>
 8005760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005764:	d00c      	beq.n	8005780 <UART_SetConfig+0x258>
 8005766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576a:	d815      	bhi.n	8005798 <UART_SetConfig+0x270>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <UART_SetConfig+0x250>
 8005770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005774:	d008      	beq.n	8005788 <UART_SetConfig+0x260>
 8005776:	e00f      	b.n	8005798 <UART_SetConfig+0x270>
 8005778:	2300      	movs	r3, #0
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577e:	e052      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005780:	2302      	movs	r3, #2
 8005782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005786:	e04e      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578e:	e04a      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005796:	e046      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e042      	b.n	8005826 <UART_SetConfig+0x2fe>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a17      	ldr	r2, [pc, #92]	; (8005804 <UART_SetConfig+0x2dc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d13a      	bne.n	8005820 <UART_SetConfig+0x2f8>
 80057aa:	4b18      	ldr	r3, [pc, #96]	; (800580c <UART_SetConfig+0x2e4>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057b8:	d01a      	beq.n	80057f0 <UART_SetConfig+0x2c8>
 80057ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057be:	d81b      	bhi.n	80057f8 <UART_SetConfig+0x2d0>
 80057c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057c4:	d00c      	beq.n	80057e0 <UART_SetConfig+0x2b8>
 80057c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ca:	d815      	bhi.n	80057f8 <UART_SetConfig+0x2d0>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <UART_SetConfig+0x2b0>
 80057d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d4:	d008      	beq.n	80057e8 <UART_SetConfig+0x2c0>
 80057d6:	e00f      	b.n	80057f8 <UART_SetConfig+0x2d0>
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057de:	e022      	b.n	8005826 <UART_SetConfig+0x2fe>
 80057e0:	2302      	movs	r3, #2
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e6:	e01e      	b.n	8005826 <UART_SetConfig+0x2fe>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ee:	e01a      	b.n	8005826 <UART_SetConfig+0x2fe>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f6:	e016      	b.n	8005826 <UART_SetConfig+0x2fe>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fe:	e012      	b.n	8005826 <UART_SetConfig+0x2fe>
 8005800:	cfff69f3 	.word	0xcfff69f3
 8005804:	40008000 	.word	0x40008000
 8005808:	40013800 	.word	0x40013800
 800580c:	40021000 	.word	0x40021000
 8005810:	40004400 	.word	0x40004400
 8005814:	40004800 	.word	0x40004800
 8005818:	40004c00 	.word	0x40004c00
 800581c:	40005000 	.word	0x40005000
 8005820:	2310      	movs	r3, #16
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4ab0      	ldr	r2, [pc, #704]	; (8005aec <UART_SetConfig+0x5c4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	f040 809b 	bne.w	8005968 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005836:	2b08      	cmp	r3, #8
 8005838:	d827      	bhi.n	800588a <UART_SetConfig+0x362>
 800583a:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <UART_SetConfig+0x318>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005865 	.word	0x08005865
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005875 	.word	0x08005875
 800584c:	0800588b 	.word	0x0800588b
 8005850:	0800587b 	.word	0x0800587b
 8005854:	0800588b 	.word	0x0800588b
 8005858:	0800588b 	.word	0x0800588b
 800585c:	0800588b 	.word	0x0800588b
 8005860:	08005883 	.word	0x08005883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005864:	f7fe fa84 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800586a:	e014      	b.n	8005896 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800586c:	f7fe fa94 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 8005870:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005872:	e010      	b.n	8005896 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005874:	4b9e      	ldr	r3, [pc, #632]	; (8005af0 <UART_SetConfig+0x5c8>)
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005878:	e00d      	b.n	8005896 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587a:	f7fe f9c7 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 800587e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005880:	e009      	b.n	8005896 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005888:	e005      	b.n	8005896 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8130 	beq.w	8005afe <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	4a94      	ldr	r2, [pc, #592]	; (8005af4 <UART_SetConfig+0x5cc>)
 80058a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	4613      	mov	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d305      	bcc.n	80058ce <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d903      	bls.n	80058d6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058d4:	e113      	b.n	8005afe <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	2200      	movs	r2, #0
 80058da:	60bb      	str	r3, [r7, #8]
 80058dc:	60fa      	str	r2, [r7, #12]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	4a84      	ldr	r2, [pc, #528]	; (8005af4 <UART_SetConfig+0x5cc>)
 80058e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2200      	movs	r2, #0
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058f8:	f7fa fc9c 	bl	8000234 <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	020b      	lsls	r3, r1, #8
 800590e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005912:	0202      	lsls	r2, r0, #8
 8005914:	6979      	ldr	r1, [r7, #20]
 8005916:	6849      	ldr	r1, [r1, #4]
 8005918:	0849      	lsrs	r1, r1, #1
 800591a:	2000      	movs	r0, #0
 800591c:	460c      	mov	r4, r1
 800591e:	4605      	mov	r5, r0
 8005920:	eb12 0804 	adds.w	r8, r2, r4
 8005924:	eb43 0905 	adc.w	r9, r3, r5
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	469a      	mov	sl, r3
 8005930:	4693      	mov	fp, r2
 8005932:	4652      	mov	r2, sl
 8005934:	465b      	mov	r3, fp
 8005936:	4640      	mov	r0, r8
 8005938:	4649      	mov	r1, r9
 800593a:	f7fa fc7b 	bl	8000234 <__aeabi_uldivmod>
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4613      	mov	r3, r2
 8005944:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800594c:	d308      	bcc.n	8005960 <UART_SetConfig+0x438>
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005954:	d204      	bcs.n	8005960 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6a3a      	ldr	r2, [r7, #32]
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	e0ce      	b.n	8005afe <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005966:	e0ca      	b.n	8005afe <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d166      	bne.n	8005a40 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8005972:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005976:	2b08      	cmp	r3, #8
 8005978:	d827      	bhi.n	80059ca <UART_SetConfig+0x4a2>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x458>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059b5 	.word	0x080059b5
 800598c:	080059cb 	.word	0x080059cb
 8005990:	080059bb 	.word	0x080059bb
 8005994:	080059cb 	.word	0x080059cb
 8005998:	080059cb 	.word	0x080059cb
 800599c:	080059cb 	.word	0x080059cb
 80059a0:	080059c3 	.word	0x080059c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a4:	f7fe f9e4 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059aa:	e014      	b.n	80059d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ac:	f7fe f9f4 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 80059b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059b2:	e010      	b.n	80059d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b4:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <UART_SetConfig+0x5c8>)
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059b8:	e00d      	b.n	80059d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ba:	f7fe f927 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 80059be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059c0:	e009      	b.n	80059d6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059c8:	e005      	b.n	80059d6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80059d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8090 	beq.w	8005afe <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	4a44      	ldr	r2, [pc, #272]	; (8005af4 <UART_SetConfig+0x5cc>)
 80059e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80059f0:	005a      	lsls	r2, r3, #1
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	441a      	add	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2b0f      	cmp	r3, #15
 8005a08:	d916      	bls.n	8005a38 <UART_SetConfig+0x510>
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a10:	d212      	bcs.n	8005a38 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f023 030f 	bic.w	r3, r3, #15
 8005a1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	085b      	lsrs	r3, r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	8bfb      	ldrh	r3, [r7, #30]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	8bfa      	ldrh	r2, [r7, #30]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	e062      	b.n	8005afe <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a3e:	e05e      	b.n	8005afe <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d828      	bhi.n	8005a9a <UART_SetConfig+0x572>
 8005a48:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x528>)
 8005a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4e:	bf00      	nop
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	08005a9b 	.word	0x08005a9b
 8005a60:	08005a8b 	.word	0x08005a8b
 8005a64:	08005a9b 	.word	0x08005a9b
 8005a68:	08005a9b 	.word	0x08005a9b
 8005a6c:	08005a9b 	.word	0x08005a9b
 8005a70:	08005a93 	.word	0x08005a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe f97c 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8005a78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a7a:	e014      	b.n	8005aa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7fe f98c 	bl	8003d98 <HAL_RCC_GetPCLK2Freq>
 8005a80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a82:	e010      	b.n	8005aa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a84:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <UART_SetConfig+0x5c8>)
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a88:	e00d      	b.n	8005aa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8a:	f7fe f8bf 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8005a8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a90:	e009      	b.n	8005aa6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a98:	e005      	b.n	8005aa6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005aa4:	bf00      	nop
    }

    if (pclk != 0U)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d028      	beq.n	8005afe <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <UART_SetConfig+0x5cc>)
 8005ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	085b      	lsrs	r3, r3, #1
 8005ac4:	441a      	add	r2, r3
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ace:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2b0f      	cmp	r3, #15
 8005ad4:	d910      	bls.n	8005af8 <UART_SetConfig+0x5d0>
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d20c      	bcs.n	8005af8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
 8005ae8:	e009      	b.n	8005afe <UART_SetConfig+0x5d6>
 8005aea:	bf00      	nop
 8005aec:	40008000 	.word	0x40008000
 8005af0:	00f42400 	.word	0x00f42400
 8005af4:	0800766c 	.word	0x0800766c
      }
      else
      {
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b1a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3730      	adds	r7, #48	; 0x30
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c26:	d10a      	bne.n	8005c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b098      	sub	sp, #96	; 0x60
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c7c:	f7fb fcfc 	bl	8001678 <HAL_GetTick>
 8005c80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d12f      	bne.n	8005cf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f88e 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d022      	beq.n	8005cf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd0:	e841 2300 	strex	r3, r2, [r1]
 8005cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e6      	bne.n	8005caa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e063      	b.n	8005db8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d149      	bne.n	8005d92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d06:	2200      	movs	r2, #0
 8005d08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f857 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d03c      	beq.n	8005d92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	623b      	str	r3, [r7, #32]
   return(result);
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	633b      	str	r3, [r7, #48]	; 0x30
 8005d38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e6      	bne.n	8005d18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6a:	61fa      	str	r2, [r7, #28]
 8005d6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	69b9      	ldr	r1, [r7, #24]
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	617b      	str	r3, [r7, #20]
   return(result);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e5      	bne.n	8005d4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e012      	b.n	8005db8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3758      	adds	r7, #88	; 0x58
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd0:	e04f      	b.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d04b      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fb fc4d 	bl	8001678 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e04e      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d037      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d034      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b40      	cmp	r3, #64	; 0x40
 8005e0c:	d031      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f003 0308 	and.w	r3, r3, #8
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d110      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2208      	movs	r2, #8
 8005e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f838 	bl	8005e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2208      	movs	r2, #8
 8005e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e029      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4c:	d111      	bne.n	8005e72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f000 f81e 	bl	8005e9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e00f      	b.n	8005e92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d0a0      	beq.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b095      	sub	sp, #84	; 0x54
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eea:	f023 0301 	bic.w	r3, r3, #1
 8005eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e3      	bne.n	8005ed4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d118      	bne.n	8005f46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f023 0310 	bic.w	r3, r3, #16
 8005f28:	647b      	str	r3, [r7, #68]	; 0x44
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6979      	ldr	r1, [r7, #20]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e6      	bne.n	8005f14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f5a:	bf00      	nop
 8005f5c:	3754      	adds	r7, #84	; 0x54
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_UARTEx_DisableFifoMode+0x16>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e027      	b.n	8005fcc <HAL_UARTEx_DisableFifoMode+0x66>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	; 0x24
 8005f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0201 	bic.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005faa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e02d      	b.n	800604c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2224      	movs	r2, #36	; 0x24
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f84f 	bl	80060d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006068:	2302      	movs	r3, #2
 800606a:	e02d      	b.n	80060c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	; 0x24
 8006078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f811 	bl	80060d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d108      	bne.n	80060f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060f0:	e031      	b.n	8006156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060f2:	2308      	movs	r3, #8
 80060f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060f6:	2308      	movs	r3, #8
 80060f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	0e5b      	lsrs	r3, r3, #25
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	0f5b      	lsrs	r3, r3, #29
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	7b3a      	ldrb	r2, [r7, #12]
 800611e:	4911      	ldr	r1, [pc, #68]	; (8006164 <UARTEx_SetNbDataToProcess+0x94>)
 8006120:	5c8a      	ldrb	r2, [r1, r2]
 8006122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006126:	7b3a      	ldrb	r2, [r7, #12]
 8006128:	490f      	ldr	r1, [pc, #60]	; (8006168 <UARTEx_SetNbDataToProcess+0x98>)
 800612a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800612c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006130:	b29a      	uxth	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	7b7a      	ldrb	r2, [r7, #13]
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <UARTEx_SetNbDataToProcess+0x94>)
 800613e:	5c8a      	ldrb	r2, [r1, r2]
 8006140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006144:	7b7a      	ldrb	r2, [r7, #13]
 8006146:	4908      	ldr	r1, [pc, #32]	; (8006168 <UARTEx_SetNbDataToProcess+0x98>)
 8006148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800614a:	fb93 f3f2 	sdiv	r3, r3, r2
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	08007684 	.word	0x08007684
 8006168:	0800768c 	.word	0x0800768c

0800616c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800616c:	b480      	push	{r7}
 800616e:	b08b      	sub	sp, #44	; 0x2c
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	fa93 f3a3 	rbit	r3, r3
 8006186:	613b      	str	r3, [r7, #16]
  return result;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006192:	2320      	movs	r3, #32
 8006194:	e003      	b.n	800619e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	fab3 f383 	clz	r3, r3
 800619c:	b2db      	uxtb	r3, r3
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	2103      	movs	r1, #3
 80061a2:	fa01 f303 	lsl.w	r3, r1, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	401a      	ands	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	fa93 f3a3 	rbit	r3, r3
 80061b4:	61fb      	str	r3, [r7, #28]
  return result;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80061c0:	2320      	movs	r3, #32
 80061c2:	e003      	b.n	80061cc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	fab3 f383 	clz	r3, r3
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	372c      	adds	r7, #44	; 0x2c
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	43db      	mvns	r3, r3
 80061fa:	401a      	ands	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	431a      	orrs	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006216:	b480      	push	{r7}
 8006218:	b08b      	sub	sp, #44	; 0x2c
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	fa93 f3a3 	rbit	r3, r3
 8006230:	613b      	str	r3, [r7, #16]
  return result;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800623c:	2320      	movs	r3, #32
 800623e:	e003      	b.n	8006248 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	fab3 f383 	clz	r3, r3
 8006246:	b2db      	uxtb	r3, r3
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	2103      	movs	r1, #3
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	61fb      	str	r3, [r7, #28]
  return result;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800626a:	2320      	movs	r3, #32
 800626c:	e003      	b.n	8006276 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	fab3 f383 	clz	r3, r3
 8006274:	b2db      	uxtb	r3, r3
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	fa01 f303 	lsl.w	r3, r1, r3
 800627e:	431a      	orrs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006284:	bf00      	nop
 8006286:	372c      	adds	r7, #44	; 0x2c
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006290:	b480      	push	{r7}
 8006292:	b08b      	sub	sp, #44	; 0x2c
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	fa93 f3a3 	rbit	r3, r3
 80062aa:	613b      	str	r3, [r7, #16]
  return result;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80062b6:	2320      	movs	r3, #32
 80062b8:	e003      	b.n	80062c2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	fab3 f383 	clz	r3, r3
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	2103      	movs	r1, #3
 80062c6:	fa01 f303 	lsl.w	r3, r1, r3
 80062ca:	43db      	mvns	r3, r3
 80062cc:	401a      	ands	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	fa93 f3a3 	rbit	r3, r3
 80062d8:	61fb      	str	r3, [r7, #28]
  return result;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80062e4:	2320      	movs	r3, #32
 80062e6:	e003      	b.n	80062f0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	fab3 f383 	clz	r3, r3
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	fa01 f303 	lsl.w	r3, r1, r3
 80062f8:	431a      	orrs	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	60da      	str	r2, [r3, #12]
}
 80062fe:	bf00      	nop
 8006300:	372c      	adds	r7, #44	; 0x2c
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800630a:	b480      	push	{r7}
 800630c:	b08b      	sub	sp, #44	; 0x2c
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1a      	ldr	r2, [r3, #32]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	fa93 f3a3 	rbit	r3, r3
 8006324:	613b      	str	r3, [r7, #16]
  return result;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006330:	2320      	movs	r3, #32
 8006332:	e003      	b.n	800633c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	fab3 f383 	clz	r3, r3
 800633a:	b2db      	uxtb	r3, r3
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	210f      	movs	r1, #15
 8006340:	fa01 f303 	lsl.w	r3, r1, r3
 8006344:	43db      	mvns	r3, r3
 8006346:	401a      	ands	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	fa93 f3a3 	rbit	r3, r3
 8006352:	61fb      	str	r3, [r7, #28]
  return result;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800635e:	2320      	movs	r3, #32
 8006360:	e003      	b.n	800636a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	fab3 f383 	clz	r3, r3
 8006368:	b2db      	uxtb	r3, r3
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	fa01 f303 	lsl.w	r3, r1, r3
 8006372:	431a      	orrs	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006378:	bf00      	nop
 800637a:	372c      	adds	r7, #44	; 0x2c
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006384:	b480      	push	{r7}
 8006386:	b08b      	sub	sp, #44	; 0x2c
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	0a1b      	lsrs	r3, r3, #8
 8006398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	fa93 f3a3 	rbit	r3, r3
 80063a0:	613b      	str	r3, [r7, #16]
  return result;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80063ac:	2320      	movs	r3, #32
 80063ae:	e003      	b.n	80063b8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	fab3 f383 	clz	r3, r3
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	210f      	movs	r1, #15
 80063bc:	fa01 f303 	lsl.w	r3, r1, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	61fb      	str	r3, [r7, #28]
  return result;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80063dc:	2320      	movs	r3, #32
 80063de:	e003      	b.n	80063e8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	fab3 f383 	clz	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	431a      	orrs	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80063f6:	bf00      	nop
 80063f8:	372c      	adds	r7, #44	; 0x2c
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b088      	sub	sp, #32
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	fa93 f3a3 	rbit	r3, r3
 8006418:	60fb      	str	r3, [r7, #12]
  return result;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <LL_GPIO_Init+0x26>
    return 32U;
 8006424:	2320      	movs	r3, #32
 8006426:	e003      	b.n	8006430 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	fab3 f383 	clz	r3, r3
 800642e:	b2db      	uxtb	r3, r3
 8006430:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006432:	e047      	b.n	80064c4 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	2101      	movs	r1, #1
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	4013      	ands	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d039      	beq.n	80064be <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d003      	beq.n	800645a <LL_GPIO_Init+0x58>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d10d      	bne.n	8006476 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	461a      	mov	r2, r3
 8006460:	69b9      	ldr	r1, [r7, #24]
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7ff fed7 	bl	8006216 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	461a      	mov	r2, r3
 800646e:	69b9      	ldr	r1, [r7, #24]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff feb8 	bl	80061e6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	461a      	mov	r2, r3
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff ff06 	bl	8006290 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d111      	bne.n	80064b0 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2bff      	cmp	r3, #255	; 0xff
 8006490:	d807      	bhi.n	80064a2 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	461a      	mov	r2, r3
 8006498:	69b9      	ldr	r1, [r7, #24]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ff35 	bl	800630a <LL_GPIO_SetAFPin_0_7>
 80064a0:	e006      	b.n	80064b0 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	461a      	mov	r2, r3
 80064a8:	69b9      	ldr	r1, [r7, #24]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff ff6a 	bl	8006384 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	461a      	mov	r2, r3
 80064b6:	69b9      	ldr	r1, [r7, #24]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff fe57 	bl	800616c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	3301      	adds	r3, #1
 80064c2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1b0      	bne.n	8006434 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064e4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80064e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	43db      	mvns	r3, r3
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	4013      	ands	r3, r2
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	1d3b      	adds	r3, r7, #4
 800651c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <srand>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4b10      	ldr	r3, [pc, #64]	; (8006594 <srand+0x44>)
 8006554:	4604      	mov	r4, r0
 8006556:	681d      	ldr	r5, [r3, #0]
 8006558:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800655a:	b9b3      	cbnz	r3, 800658a <srand+0x3a>
 800655c:	2018      	movs	r0, #24
 800655e:	f000 fa7b 	bl	8006a58 <malloc>
 8006562:	4602      	mov	r2, r0
 8006564:	6328      	str	r0, [r5, #48]	; 0x30
 8006566:	b920      	cbnz	r0, 8006572 <srand+0x22>
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <srand+0x48>)
 800656a:	2146      	movs	r1, #70	; 0x46
 800656c:	480b      	ldr	r0, [pc, #44]	; (800659c <srand+0x4c>)
 800656e:	f000 fa09 	bl	8006984 <__assert_func>
 8006572:	490b      	ldr	r1, [pc, #44]	; (80065a0 <srand+0x50>)
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <srand+0x54>)
 8006576:	e9c0 1300 	strd	r1, r3, [r0]
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <srand+0x58>)
 800657c:	2100      	movs	r1, #0
 800657e:	6083      	str	r3, [r0, #8]
 8006580:	230b      	movs	r3, #11
 8006582:	8183      	strh	r3, [r0, #12]
 8006584:	2001      	movs	r0, #1
 8006586:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800658a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800658c:	2200      	movs	r2, #0
 800658e:	611c      	str	r4, [r3, #16]
 8006590:	615a      	str	r2, [r3, #20]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	20000068 	.word	0x20000068
 8006598:	08007694 	.word	0x08007694
 800659c:	080076ab 	.word	0x080076ab
 80065a0:	abcd330e 	.word	0xabcd330e
 80065a4:	e66d1234 	.word	0xe66d1234
 80065a8:	0005deec 	.word	0x0005deec

080065ac <rand>:
 80065ac:	4b16      	ldr	r3, [pc, #88]	; (8006608 <rand+0x5c>)
 80065ae:	b510      	push	{r4, lr}
 80065b0:	681c      	ldr	r4, [r3, #0]
 80065b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065b4:	b9b3      	cbnz	r3, 80065e4 <rand+0x38>
 80065b6:	2018      	movs	r0, #24
 80065b8:	f000 fa4e 	bl	8006a58 <malloc>
 80065bc:	4602      	mov	r2, r0
 80065be:	6320      	str	r0, [r4, #48]	; 0x30
 80065c0:	b920      	cbnz	r0, 80065cc <rand+0x20>
 80065c2:	4b12      	ldr	r3, [pc, #72]	; (800660c <rand+0x60>)
 80065c4:	2152      	movs	r1, #82	; 0x52
 80065c6:	4812      	ldr	r0, [pc, #72]	; (8006610 <rand+0x64>)
 80065c8:	f000 f9dc 	bl	8006984 <__assert_func>
 80065cc:	4911      	ldr	r1, [pc, #68]	; (8006614 <rand+0x68>)
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <rand+0x6c>)
 80065d0:	e9c0 1300 	strd	r1, r3, [r0]
 80065d4:	4b11      	ldr	r3, [pc, #68]	; (800661c <rand+0x70>)
 80065d6:	2100      	movs	r1, #0
 80065d8:	6083      	str	r3, [r0, #8]
 80065da:	230b      	movs	r3, #11
 80065dc:	8183      	strh	r3, [r0, #12]
 80065de:	2001      	movs	r0, #1
 80065e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80065e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80065e6:	480e      	ldr	r0, [pc, #56]	; (8006620 <rand+0x74>)
 80065e8:	690b      	ldr	r3, [r1, #16]
 80065ea:	694c      	ldr	r4, [r1, #20]
 80065ec:	4a0d      	ldr	r2, [pc, #52]	; (8006624 <rand+0x78>)
 80065ee:	4358      	muls	r0, r3
 80065f0:	fb02 0004 	mla	r0, r2, r4, r0
 80065f4:	fba3 3202 	umull	r3, r2, r3, r2
 80065f8:	3301      	adds	r3, #1
 80065fa:	eb40 0002 	adc.w	r0, r0, r2
 80065fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006602:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006606:	bd10      	pop	{r4, pc}
 8006608:	20000068 	.word	0x20000068
 800660c:	08007694 	.word	0x08007694
 8006610:	080076ab 	.word	0x080076ab
 8006614:	abcd330e 	.word	0xabcd330e
 8006618:	e66d1234 	.word	0xe66d1234
 800661c:	0005deec 	.word	0x0005deec
 8006620:	5851f42d 	.word	0x5851f42d
 8006624:	4c957f2d 	.word	0x4c957f2d

08006628 <std>:
 8006628:	2300      	movs	r3, #0
 800662a:	b510      	push	{r4, lr}
 800662c:	4604      	mov	r4, r0
 800662e:	6083      	str	r3, [r0, #8]
 8006630:	8181      	strh	r1, [r0, #12]
 8006632:	4619      	mov	r1, r3
 8006634:	6643      	str	r3, [r0, #100]	; 0x64
 8006636:	81c2      	strh	r2, [r0, #14]
 8006638:	2208      	movs	r2, #8
 800663a:	6183      	str	r3, [r0, #24]
 800663c:	e9c0 3300 	strd	r3, r3, [r0]
 8006640:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006644:	305c      	adds	r0, #92	; 0x5c
 8006646:	f000 f8f4 	bl	8006832 <memset>
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <std+0x58>)
 800664c:	6224      	str	r4, [r4, #32]
 800664e:	6263      	str	r3, [r4, #36]	; 0x24
 8006650:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <std+0x5c>)
 8006652:	62a3      	str	r3, [r4, #40]	; 0x28
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <std+0x60>)
 8006656:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <std+0x64>)
 800665a:	6323      	str	r3, [r4, #48]	; 0x30
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <std+0x68>)
 800665e:	429c      	cmp	r4, r3
 8006660:	d006      	beq.n	8006670 <std+0x48>
 8006662:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006666:	4294      	cmp	r4, r2
 8006668:	d002      	beq.n	8006670 <std+0x48>
 800666a:	33d0      	adds	r3, #208	; 0xd0
 800666c:	429c      	cmp	r4, r3
 800666e:	d105      	bne.n	800667c <std+0x54>
 8006670:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006678:	f000 b980 	b.w	800697c <__retarget_lock_init_recursive>
 800667c:	bd10      	pop	{r4, pc}
 800667e:	bf00      	nop
 8006680:	080067ad 	.word	0x080067ad
 8006684:	080067cf 	.word	0x080067cf
 8006688:	08006807 	.word	0x08006807
 800668c:	0800682b 	.word	0x0800682b
 8006690:	200004e4 	.word	0x200004e4

08006694 <stdio_exit_handler>:
 8006694:	4a02      	ldr	r2, [pc, #8]	; (80066a0 <stdio_exit_handler+0xc>)
 8006696:	4903      	ldr	r1, [pc, #12]	; (80066a4 <stdio_exit_handler+0x10>)
 8006698:	4803      	ldr	r0, [pc, #12]	; (80066a8 <stdio_exit_handler+0x14>)
 800669a:	f000 b869 	b.w	8006770 <_fwalk_sglue>
 800669e:	bf00      	nop
 80066a0:	20000010 	.word	0x20000010
 80066a4:	08006cc9 	.word	0x08006cc9
 80066a8:	2000001c 	.word	0x2000001c

080066ac <cleanup_stdio>:
 80066ac:	6841      	ldr	r1, [r0, #4]
 80066ae:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <cleanup_stdio+0x34>)
 80066b0:	4299      	cmp	r1, r3
 80066b2:	b510      	push	{r4, lr}
 80066b4:	4604      	mov	r4, r0
 80066b6:	d001      	beq.n	80066bc <cleanup_stdio+0x10>
 80066b8:	f000 fb06 	bl	8006cc8 <_fflush_r>
 80066bc:	68a1      	ldr	r1, [r4, #8]
 80066be:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <cleanup_stdio+0x38>)
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d002      	beq.n	80066ca <cleanup_stdio+0x1e>
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 faff 	bl	8006cc8 <_fflush_r>
 80066ca:	68e1      	ldr	r1, [r4, #12]
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <cleanup_stdio+0x3c>)
 80066ce:	4299      	cmp	r1, r3
 80066d0:	d004      	beq.n	80066dc <cleanup_stdio+0x30>
 80066d2:	4620      	mov	r0, r4
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d8:	f000 baf6 	b.w	8006cc8 <_fflush_r>
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	200004e4 	.word	0x200004e4
 80066e4:	2000054c 	.word	0x2000054c
 80066e8:	200005b4 	.word	0x200005b4

080066ec <global_stdio_init.part.0>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	4b0b      	ldr	r3, [pc, #44]	; (800671c <global_stdio_init.part.0+0x30>)
 80066f0:	2104      	movs	r1, #4
 80066f2:	4c0b      	ldr	r4, [pc, #44]	; (8006720 <global_stdio_init.part.0+0x34>)
 80066f4:	4a0b      	ldr	r2, [pc, #44]	; (8006724 <global_stdio_init.part.0+0x38>)
 80066f6:	4620      	mov	r0, r4
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f7ff ff94 	bl	8006628 <std>
 8006700:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006704:	2201      	movs	r2, #1
 8006706:	2109      	movs	r1, #9
 8006708:	f7ff ff8e 	bl	8006628 <std>
 800670c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006710:	2202      	movs	r2, #2
 8006712:	2112      	movs	r1, #18
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006718:	f7ff bf86 	b.w	8006628 <std>
 800671c:	2000061c 	.word	0x2000061c
 8006720:	200004e4 	.word	0x200004e4
 8006724:	08006695 	.word	0x08006695

08006728 <__sfp_lock_acquire>:
 8006728:	4801      	ldr	r0, [pc, #4]	; (8006730 <__sfp_lock_acquire+0x8>)
 800672a:	f000 b928 	b.w	800697e <__retarget_lock_acquire_recursive>
 800672e:	bf00      	nop
 8006730:	20000625 	.word	0x20000625

08006734 <__sfp_lock_release>:
 8006734:	4801      	ldr	r0, [pc, #4]	; (800673c <__sfp_lock_release+0x8>)
 8006736:	f000 b923 	b.w	8006980 <__retarget_lock_release_recursive>
 800673a:	bf00      	nop
 800673c:	20000625 	.word	0x20000625

08006740 <__sinit>:
 8006740:	b510      	push	{r4, lr}
 8006742:	4604      	mov	r4, r0
 8006744:	f7ff fff0 	bl	8006728 <__sfp_lock_acquire>
 8006748:	6a23      	ldr	r3, [r4, #32]
 800674a:	b11b      	cbz	r3, 8006754 <__sinit+0x14>
 800674c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006750:	f7ff bff0 	b.w	8006734 <__sfp_lock_release>
 8006754:	4b04      	ldr	r3, [pc, #16]	; (8006768 <__sinit+0x28>)
 8006756:	6223      	str	r3, [r4, #32]
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <__sinit+0x2c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f5      	bne.n	800674c <__sinit+0xc>
 8006760:	f7ff ffc4 	bl	80066ec <global_stdio_init.part.0>
 8006764:	e7f2      	b.n	800674c <__sinit+0xc>
 8006766:	bf00      	nop
 8006768:	080066ad 	.word	0x080066ad
 800676c:	2000061c 	.word	0x2000061c

08006770 <_fwalk_sglue>:
 8006770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006774:	4607      	mov	r7, r0
 8006776:	4688      	mov	r8, r1
 8006778:	4614      	mov	r4, r2
 800677a:	2600      	movs	r6, #0
 800677c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006780:	f1b9 0901 	subs.w	r9, r9, #1
 8006784:	d505      	bpl.n	8006792 <_fwalk_sglue+0x22>
 8006786:	6824      	ldr	r4, [r4, #0]
 8006788:	2c00      	cmp	r4, #0
 800678a:	d1f7      	bne.n	800677c <_fwalk_sglue+0xc>
 800678c:	4630      	mov	r0, r6
 800678e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006792:	89ab      	ldrh	r3, [r5, #12]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d907      	bls.n	80067a8 <_fwalk_sglue+0x38>
 8006798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800679c:	3301      	adds	r3, #1
 800679e:	d003      	beq.n	80067a8 <_fwalk_sglue+0x38>
 80067a0:	4629      	mov	r1, r5
 80067a2:	4638      	mov	r0, r7
 80067a4:	47c0      	blx	r8
 80067a6:	4306      	orrs	r6, r0
 80067a8:	3568      	adds	r5, #104	; 0x68
 80067aa:	e7e9      	b.n	8006780 <_fwalk_sglue+0x10>

080067ac <__sread>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	460c      	mov	r4, r1
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	f000 f894 	bl	80068e0 <_read_r>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	bfab      	itete	ge
 80067bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067be:	89a3      	ldrhlt	r3, [r4, #12]
 80067c0:	181b      	addge	r3, r3, r0
 80067c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067c6:	bfac      	ite	ge
 80067c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067ca:	81a3      	strhlt	r3, [r4, #12]
 80067cc:	bd10      	pop	{r4, pc}

080067ce <__swrite>:
 80067ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	461f      	mov	r7, r3
 80067d4:	898b      	ldrh	r3, [r1, #12]
 80067d6:	4605      	mov	r5, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	05db      	lsls	r3, r3, #23
 80067dc:	4616      	mov	r6, r2
 80067de:	d505      	bpl.n	80067ec <__swrite+0x1e>
 80067e0:	2302      	movs	r3, #2
 80067e2:	2200      	movs	r2, #0
 80067e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e8:	f000 f868 	bl	80068bc <_lseek_r>
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	4632      	mov	r2, r6
 80067f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067f4:	4628      	mov	r0, r5
 80067f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	463b      	mov	r3, r7
 80067fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	f000 b87f 	b.w	8006904 <_write_r>

08006806 <__sseek>:
 8006806:	b510      	push	{r4, lr}
 8006808:	460c      	mov	r4, r1
 800680a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680e:	f000 f855 	bl	80068bc <_lseek_r>
 8006812:	1c43      	adds	r3, r0, #1
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	bf15      	itete	ne
 8006818:	6560      	strne	r0, [r4, #84]	; 0x54
 800681a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800681e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006822:	81a3      	strheq	r3, [r4, #12]
 8006824:	bf18      	it	ne
 8006826:	81a3      	strhne	r3, [r4, #12]
 8006828:	bd10      	pop	{r4, pc}

0800682a <__sclose>:
 800682a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682e:	f000 b823 	b.w	8006878 <_close_r>

08006832 <memset>:
 8006832:	4402      	add	r2, r0
 8006834:	4603      	mov	r3, r0
 8006836:	4293      	cmp	r3, r2
 8006838:	d100      	bne.n	800683c <memset+0xa>
 800683a:	4770      	bx	lr
 800683c:	f803 1b01 	strb.w	r1, [r3], #1
 8006840:	e7f9      	b.n	8006836 <memset+0x4>
	...

08006844 <time>:
 8006844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <time+0x30>)
 8006848:	2200      	movs	r2, #0
 800684a:	4669      	mov	r1, sp
 800684c:	4604      	mov	r4, r0
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	f000 f822 	bl	8006898 <_gettimeofday_r>
 8006854:	2800      	cmp	r0, #0
 8006856:	bfbe      	ittt	lt
 8006858:	f04f 32ff 	movlt.w	r2, #4294967295
 800685c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006860:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006864:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006868:	b10c      	cbz	r4, 800686e <time+0x2a>
 800686a:	e9c4 0100 	strd	r0, r1, [r4]
 800686e:	b004      	add	sp, #16
 8006870:	bd10      	pop	{r4, pc}
 8006872:	bf00      	nop
 8006874:	20000068 	.word	0x20000068

08006878 <_close_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	2300      	movs	r3, #0
 800687c:	4d05      	ldr	r5, [pc, #20]	; (8006894 <_close_r+0x1c>)
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fa fd39 	bl	80012fa <_close>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_close_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_close_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20000620 	.word	0x20000620

08006898 <_gettimeofday_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	2300      	movs	r3, #0
 800689c:	4d06      	ldr	r5, [pc, #24]	; (80068b8 <_gettimeofday_r+0x20>)
 800689e:	4604      	mov	r4, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	602b      	str	r3, [r5, #0]
 80068a6:	f000 fea1 	bl	80075ec <_gettimeofday>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d102      	bne.n	80068b4 <_gettimeofday_r+0x1c>
 80068ae:	682b      	ldr	r3, [r5, #0]
 80068b0:	b103      	cbz	r3, 80068b4 <_gettimeofday_r+0x1c>
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	bf00      	nop
 80068b8:	20000620 	.word	0x20000620

080068bc <_lseek_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4604      	mov	r4, r0
 80068c0:	4d06      	ldr	r5, [pc, #24]	; (80068dc <_lseek_r+0x20>)
 80068c2:	4608      	mov	r0, r1
 80068c4:	4611      	mov	r1, r2
 80068c6:	2200      	movs	r2, #0
 80068c8:	602a      	str	r2, [r5, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f7fa fd3c 	bl	8001348 <_lseek>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_lseek_r+0x1e>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_lseek_r+0x1e>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20000620 	.word	0x20000620

080068e0 <_read_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4604      	mov	r4, r0
 80068e4:	4d06      	ldr	r5, [pc, #24]	; (8006900 <_read_r+0x20>)
 80068e6:	4608      	mov	r0, r1
 80068e8:	4611      	mov	r1, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	602a      	str	r2, [r5, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f7fa fcca 	bl	8001288 <_read>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_read_r+0x1e>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_read_r+0x1e>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	20000620 	.word	0x20000620

08006904 <_write_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4604      	mov	r4, r0
 8006908:	4d06      	ldr	r5, [pc, #24]	; (8006924 <_write_r+0x20>)
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fa fcd5 	bl	80012c2 <_write>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_write_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_write_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20000620 	.word	0x20000620

08006928 <__errno>:
 8006928:	4b01      	ldr	r3, [pc, #4]	; (8006930 <__errno+0x8>)
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20000068 	.word	0x20000068

08006934 <__libc_init_array>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4d0d      	ldr	r5, [pc, #52]	; (800696c <__libc_init_array+0x38>)
 8006938:	2600      	movs	r6, #0
 800693a:	4c0d      	ldr	r4, [pc, #52]	; (8006970 <__libc_init_array+0x3c>)
 800693c:	1b64      	subs	r4, r4, r5
 800693e:	10a4      	asrs	r4, r4, #2
 8006940:	42a6      	cmp	r6, r4
 8006942:	d109      	bne.n	8006958 <__libc_init_array+0x24>
 8006944:	4d0b      	ldr	r5, [pc, #44]	; (8006974 <__libc_init_array+0x40>)
 8006946:	2600      	movs	r6, #0
 8006948:	4c0b      	ldr	r4, [pc, #44]	; (8006978 <__libc_init_array+0x44>)
 800694a:	f000 fe57 	bl	80075fc <_init>
 800694e:	1b64      	subs	r4, r4, r5
 8006950:	10a4      	asrs	r4, r4, #2
 8006952:	42a6      	cmp	r6, r4
 8006954:	d105      	bne.n	8006962 <__libc_init_array+0x2e>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	f855 3b04 	ldr.w	r3, [r5], #4
 800695c:	3601      	adds	r6, #1
 800695e:	4798      	blx	r3
 8006960:	e7ee      	b.n	8006940 <__libc_init_array+0xc>
 8006962:	f855 3b04 	ldr.w	r3, [r5], #4
 8006966:	3601      	adds	r6, #1
 8006968:	4798      	blx	r3
 800696a:	e7f2      	b.n	8006952 <__libc_init_array+0x1e>
 800696c:	0800777c 	.word	0x0800777c
 8006970:	0800777c 	.word	0x0800777c
 8006974:	0800777c 	.word	0x0800777c
 8006978:	08007780 	.word	0x08007780

0800697c <__retarget_lock_init_recursive>:
 800697c:	4770      	bx	lr

0800697e <__retarget_lock_acquire_recursive>:
 800697e:	4770      	bx	lr

08006980 <__retarget_lock_release_recursive>:
 8006980:	4770      	bx	lr
	...

08006984 <__assert_func>:
 8006984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006986:	4614      	mov	r4, r2
 8006988:	461a      	mov	r2, r3
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <__assert_func+0x2c>)
 800698c:	4605      	mov	r5, r0
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68d8      	ldr	r0, [r3, #12]
 8006992:	b14c      	cbz	r4, 80069a8 <__assert_func+0x24>
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <__assert_func+0x30>)
 8006996:	9100      	str	r1, [sp, #0]
 8006998:	4907      	ldr	r1, [pc, #28]	; (80069b8 <__assert_func+0x34>)
 800699a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800699e:	462b      	mov	r3, r5
 80069a0:	f000 f9ba 	bl	8006d18 <fiprintf>
 80069a4:	f000 f9da 	bl	8006d5c <abort>
 80069a8:	4b04      	ldr	r3, [pc, #16]	; (80069bc <__assert_func+0x38>)
 80069aa:	461c      	mov	r4, r3
 80069ac:	e7f3      	b.n	8006996 <__assert_func+0x12>
 80069ae:	bf00      	nop
 80069b0:	20000068 	.word	0x20000068
 80069b4:	08007703 	.word	0x08007703
 80069b8:	08007710 	.word	0x08007710
 80069bc:	0800773e 	.word	0x0800773e

080069c0 <_free_r>:
 80069c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069c2:	2900      	cmp	r1, #0
 80069c4:	d043      	beq.n	8006a4e <_free_r+0x8e>
 80069c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ca:	1f0c      	subs	r4, r1, #4
 80069cc:	9001      	str	r0, [sp, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bfb8      	it	lt
 80069d2:	18e4      	addlt	r4, r4, r3
 80069d4:	f000 f8e8 	bl	8006ba8 <__malloc_lock>
 80069d8:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <_free_r+0x94>)
 80069da:	9801      	ldr	r0, [sp, #4]
 80069dc:	6813      	ldr	r3, [r2, #0]
 80069de:	b933      	cbnz	r3, 80069ee <_free_r+0x2e>
 80069e0:	6063      	str	r3, [r4, #4]
 80069e2:	6014      	str	r4, [r2, #0]
 80069e4:	b003      	add	sp, #12
 80069e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069ea:	f000 b8e3 	b.w	8006bb4 <__malloc_unlock>
 80069ee:	42a3      	cmp	r3, r4
 80069f0:	d908      	bls.n	8006a04 <_free_r+0x44>
 80069f2:	6825      	ldr	r5, [r4, #0]
 80069f4:	1961      	adds	r1, r4, r5
 80069f6:	428b      	cmp	r3, r1
 80069f8:	bf01      	itttt	eq
 80069fa:	6819      	ldreq	r1, [r3, #0]
 80069fc:	685b      	ldreq	r3, [r3, #4]
 80069fe:	1949      	addeq	r1, r1, r5
 8006a00:	6021      	streq	r1, [r4, #0]
 8006a02:	e7ed      	b.n	80069e0 <_free_r+0x20>
 8006a04:	461a      	mov	r2, r3
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	b10b      	cbz	r3, 8006a0e <_free_r+0x4e>
 8006a0a:	42a3      	cmp	r3, r4
 8006a0c:	d9fa      	bls.n	8006a04 <_free_r+0x44>
 8006a0e:	6811      	ldr	r1, [r2, #0]
 8006a10:	1855      	adds	r5, r2, r1
 8006a12:	42a5      	cmp	r5, r4
 8006a14:	d10b      	bne.n	8006a2e <_free_r+0x6e>
 8006a16:	6824      	ldr	r4, [r4, #0]
 8006a18:	4421      	add	r1, r4
 8006a1a:	1854      	adds	r4, r2, r1
 8006a1c:	6011      	str	r1, [r2, #0]
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	d1e0      	bne.n	80069e4 <_free_r+0x24>
 8006a22:	681c      	ldr	r4, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	440c      	add	r4, r1
 8006a28:	6053      	str	r3, [r2, #4]
 8006a2a:	6014      	str	r4, [r2, #0]
 8006a2c:	e7da      	b.n	80069e4 <_free_r+0x24>
 8006a2e:	d902      	bls.n	8006a36 <_free_r+0x76>
 8006a30:	230c      	movs	r3, #12
 8006a32:	6003      	str	r3, [r0, #0]
 8006a34:	e7d6      	b.n	80069e4 <_free_r+0x24>
 8006a36:	6825      	ldr	r5, [r4, #0]
 8006a38:	1961      	adds	r1, r4, r5
 8006a3a:	428b      	cmp	r3, r1
 8006a3c:	bf02      	ittt	eq
 8006a3e:	6819      	ldreq	r1, [r3, #0]
 8006a40:	685b      	ldreq	r3, [r3, #4]
 8006a42:	1949      	addeq	r1, r1, r5
 8006a44:	6063      	str	r3, [r4, #4]
 8006a46:	bf08      	it	eq
 8006a48:	6021      	streq	r1, [r4, #0]
 8006a4a:	6054      	str	r4, [r2, #4]
 8006a4c:	e7ca      	b.n	80069e4 <_free_r+0x24>
 8006a4e:	b003      	add	sp, #12
 8006a50:	bd30      	pop	{r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	20000628 	.word	0x20000628

08006a58 <malloc>:
 8006a58:	4b02      	ldr	r3, [pc, #8]	; (8006a64 <malloc+0xc>)
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f000 b823 	b.w	8006aa8 <_malloc_r>
 8006a62:	bf00      	nop
 8006a64:	20000068 	.word	0x20000068

08006a68 <sbrk_aligned>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	4e0e      	ldr	r6, [pc, #56]	; (8006aa4 <sbrk_aligned+0x3c>)
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	4605      	mov	r5, r0
 8006a70:	6831      	ldr	r1, [r6, #0]
 8006a72:	b911      	cbnz	r1, 8006a7a <sbrk_aligned+0x12>
 8006a74:	f000 f962 	bl	8006d3c <_sbrk_r>
 8006a78:	6030      	str	r0, [r6, #0]
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f000 f95d 	bl	8006d3c <_sbrk_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d00a      	beq.n	8006a9c <sbrk_aligned+0x34>
 8006a86:	1cc4      	adds	r4, r0, #3
 8006a88:	f024 0403 	bic.w	r4, r4, #3
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d007      	beq.n	8006aa0 <sbrk_aligned+0x38>
 8006a90:	1a21      	subs	r1, r4, r0
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f952 	bl	8006d3c <_sbrk_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d101      	bne.n	8006aa0 <sbrk_aligned+0x38>
 8006a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	2000062c 	.word	0x2000062c

08006aa8 <_malloc_r>:
 8006aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aac:	1ccd      	adds	r5, r1, #3
 8006aae:	4607      	mov	r7, r0
 8006ab0:	f025 0503 	bic.w	r5, r5, #3
 8006ab4:	3508      	adds	r5, #8
 8006ab6:	2d0c      	cmp	r5, #12
 8006ab8:	bf38      	it	cc
 8006aba:	250c      	movcc	r5, #12
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	db01      	blt.n	8006ac4 <_malloc_r+0x1c>
 8006ac0:	42a9      	cmp	r1, r5
 8006ac2:	d905      	bls.n	8006ad0 <_malloc_r+0x28>
 8006ac4:	230c      	movs	r3, #12
 8006ac6:	2600      	movs	r6, #0
 8006ac8:	603b      	str	r3, [r7, #0]
 8006aca:	4630      	mov	r0, r6
 8006acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ba4 <_malloc_r+0xfc>
 8006ad4:	f000 f868 	bl	8006ba8 <__malloc_lock>
 8006ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8006adc:	461c      	mov	r4, r3
 8006ade:	bb5c      	cbnz	r4, 8006b38 <_malloc_r+0x90>
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	f7ff ffc0 	bl	8006a68 <sbrk_aligned>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	4604      	mov	r4, r0
 8006aec:	d155      	bne.n	8006b9a <_malloc_r+0xf2>
 8006aee:	f8d8 4000 	ldr.w	r4, [r8]
 8006af2:	4626      	mov	r6, r4
 8006af4:	2e00      	cmp	r6, #0
 8006af6:	d145      	bne.n	8006b84 <_malloc_r+0xdc>
 8006af8:	2c00      	cmp	r4, #0
 8006afa:	d048      	beq.n	8006b8e <_malloc_r+0xe6>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	4631      	mov	r1, r6
 8006b00:	4638      	mov	r0, r7
 8006b02:	eb04 0903 	add.w	r9, r4, r3
 8006b06:	f000 f919 	bl	8006d3c <_sbrk_r>
 8006b0a:	4581      	cmp	r9, r0
 8006b0c:	d13f      	bne.n	8006b8e <_malloc_r+0xe6>
 8006b0e:	6821      	ldr	r1, [r4, #0]
 8006b10:	4638      	mov	r0, r7
 8006b12:	1a6d      	subs	r5, r5, r1
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7ff ffa7 	bl	8006a68 <sbrk_aligned>
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d037      	beq.n	8006b8e <_malloc_r+0xe6>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	442b      	add	r3, r5
 8006b22:	6023      	str	r3, [r4, #0]
 8006b24:	f8d8 3000 	ldr.w	r3, [r8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d038      	beq.n	8006b9e <_malloc_r+0xf6>
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	42a2      	cmp	r2, r4
 8006b30:	d12b      	bne.n	8006b8a <_malloc_r+0xe2>
 8006b32:	2200      	movs	r2, #0
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	e00f      	b.n	8006b58 <_malloc_r+0xb0>
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	1b52      	subs	r2, r2, r5
 8006b3c:	d41f      	bmi.n	8006b7e <_malloc_r+0xd6>
 8006b3e:	2a0b      	cmp	r2, #11
 8006b40:	d917      	bls.n	8006b72 <_malloc_r+0xca>
 8006b42:	1961      	adds	r1, r4, r5
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	6025      	str	r5, [r4, #0]
 8006b48:	bf18      	it	ne
 8006b4a:	6059      	strne	r1, [r3, #4]
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	bf08      	it	eq
 8006b50:	f8c8 1000 	streq.w	r1, [r8]
 8006b54:	5162      	str	r2, [r4, r5]
 8006b56:	604b      	str	r3, [r1, #4]
 8006b58:	f104 060b 	add.w	r6, r4, #11
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f000 f829 	bl	8006bb4 <__malloc_unlock>
 8006b62:	1d23      	adds	r3, r4, #4
 8006b64:	f026 0607 	bic.w	r6, r6, #7
 8006b68:	1af2      	subs	r2, r6, r3
 8006b6a:	d0ae      	beq.n	8006aca <_malloc_r+0x22>
 8006b6c:	1b9b      	subs	r3, r3, r6
 8006b6e:	50a3      	str	r3, [r4, r2]
 8006b70:	e7ab      	b.n	8006aca <_malloc_r+0x22>
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	d1dd      	bne.n	8006b34 <_malloc_r+0x8c>
 8006b78:	f8c8 2000 	str.w	r2, [r8]
 8006b7c:	e7ec      	b.n	8006b58 <_malloc_r+0xb0>
 8006b7e:	4623      	mov	r3, r4
 8006b80:	6864      	ldr	r4, [r4, #4]
 8006b82:	e7ac      	b.n	8006ade <_malloc_r+0x36>
 8006b84:	4634      	mov	r4, r6
 8006b86:	6876      	ldr	r6, [r6, #4]
 8006b88:	e7b4      	b.n	8006af4 <_malloc_r+0x4c>
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	e7cc      	b.n	8006b28 <_malloc_r+0x80>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	4638      	mov	r0, r7
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	f000 f80e 	bl	8006bb4 <__malloc_unlock>
 8006b98:	e797      	b.n	8006aca <_malloc_r+0x22>
 8006b9a:	6025      	str	r5, [r4, #0]
 8006b9c:	e7dc      	b.n	8006b58 <_malloc_r+0xb0>
 8006b9e:	605b      	str	r3, [r3, #4]
 8006ba0:	deff      	udf	#255	; 0xff
 8006ba2:	bf00      	nop
 8006ba4:	20000628 	.word	0x20000628

08006ba8 <__malloc_lock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__malloc_lock+0x8>)
 8006baa:	f7ff bee8 	b.w	800697e <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000624 	.word	0x20000624

08006bb4 <__malloc_unlock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__malloc_unlock+0x8>)
 8006bb6:	f7ff bee3 	b.w	8006980 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20000624 	.word	0x20000624

08006bc0 <__sflush_r>:
 8006bc0:	898a      	ldrh	r2, [r1, #12]
 8006bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	0710      	lsls	r0, r2, #28
 8006bca:	460c      	mov	r4, r1
 8006bcc:	d458      	bmi.n	8006c80 <__sflush_r+0xc0>
 8006bce:	684b      	ldr	r3, [r1, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	dc05      	bgt.n	8006be0 <__sflush_r+0x20>
 8006bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	dc02      	bgt.n	8006be0 <__sflush_r+0x20>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	d0f9      	beq.n	8006bda <__sflush_r+0x1a>
 8006be6:	2300      	movs	r3, #0
 8006be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bec:	682f      	ldr	r7, [r5, #0]
 8006bee:	6a21      	ldr	r1, [r4, #32]
 8006bf0:	602b      	str	r3, [r5, #0]
 8006bf2:	d032      	beq.n	8006c5a <__sflush_r+0x9a>
 8006bf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	075a      	lsls	r2, r3, #29
 8006bfa:	d505      	bpl.n	8006c08 <__sflush_r+0x48>
 8006bfc:	6863      	ldr	r3, [r4, #4]
 8006bfe:	1ac0      	subs	r0, r0, r3
 8006c00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c02:	b10b      	cbz	r3, 8006c08 <__sflush_r+0x48>
 8006c04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c06:	1ac0      	subs	r0, r0, r3
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c0e:	4628      	mov	r0, r5
 8006c10:	6a21      	ldr	r1, [r4, #32]
 8006c12:	47b0      	blx	r6
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	89a3      	ldrh	r3, [r4, #12]
 8006c18:	d106      	bne.n	8006c28 <__sflush_r+0x68>
 8006c1a:	6829      	ldr	r1, [r5, #0]
 8006c1c:	291d      	cmp	r1, #29
 8006c1e:	d82b      	bhi.n	8006c78 <__sflush_r+0xb8>
 8006c20:	4a28      	ldr	r2, [pc, #160]	; (8006cc4 <__sflush_r+0x104>)
 8006c22:	410a      	asrs	r2, r1
 8006c24:	07d6      	lsls	r6, r2, #31
 8006c26:	d427      	bmi.n	8006c78 <__sflush_r+0xb8>
 8006c28:	2200      	movs	r2, #0
 8006c2a:	04d9      	lsls	r1, r3, #19
 8006c2c:	6062      	str	r2, [r4, #4]
 8006c2e:	6922      	ldr	r2, [r4, #16]
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	d504      	bpl.n	8006c3e <__sflush_r+0x7e>
 8006c34:	1c42      	adds	r2, r0, #1
 8006c36:	d101      	bne.n	8006c3c <__sflush_r+0x7c>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b903      	cbnz	r3, 8006c3e <__sflush_r+0x7e>
 8006c3c:	6560      	str	r0, [r4, #84]	; 0x54
 8006c3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c40:	602f      	str	r7, [r5, #0]
 8006c42:	2900      	cmp	r1, #0
 8006c44:	d0c9      	beq.n	8006bda <__sflush_r+0x1a>
 8006c46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d002      	beq.n	8006c54 <__sflush_r+0x94>
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7ff feb6 	bl	80069c0 <_free_r>
 8006c54:	2000      	movs	r0, #0
 8006c56:	6360      	str	r0, [r4, #52]	; 0x34
 8006c58:	e7c0      	b.n	8006bdc <__sflush_r+0x1c>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b0      	blx	r6
 8006c60:	1c41      	adds	r1, r0, #1
 8006c62:	d1c8      	bne.n	8006bf6 <__sflush_r+0x36>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0c5      	beq.n	8006bf6 <__sflush_r+0x36>
 8006c6a:	2b1d      	cmp	r3, #29
 8006c6c:	d001      	beq.n	8006c72 <__sflush_r+0xb2>
 8006c6e:	2b16      	cmp	r3, #22
 8006c70:	d101      	bne.n	8006c76 <__sflush_r+0xb6>
 8006c72:	602f      	str	r7, [r5, #0]
 8006c74:	e7b1      	b.n	8006bda <__sflush_r+0x1a>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	e7ad      	b.n	8006bdc <__sflush_r+0x1c>
 8006c80:	690f      	ldr	r7, [r1, #16]
 8006c82:	2f00      	cmp	r7, #0
 8006c84:	d0a9      	beq.n	8006bda <__sflush_r+0x1a>
 8006c86:	0793      	lsls	r3, r2, #30
 8006c88:	680e      	ldr	r6, [r1, #0]
 8006c8a:	600f      	str	r7, [r1, #0]
 8006c8c:	bf0c      	ite	eq
 8006c8e:	694b      	ldreq	r3, [r1, #20]
 8006c90:	2300      	movne	r3, #0
 8006c92:	eba6 0807 	sub.w	r8, r6, r7
 8006c96:	608b      	str	r3, [r1, #8]
 8006c98:	f1b8 0f00 	cmp.w	r8, #0
 8006c9c:	dd9d      	ble.n	8006bda <__sflush_r+0x1a>
 8006c9e:	4643      	mov	r3, r8
 8006ca0:	463a      	mov	r2, r7
 8006ca2:	6a21      	ldr	r1, [r4, #32]
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ca8:	47b0      	blx	r6
 8006caa:	2800      	cmp	r0, #0
 8006cac:	dc06      	bgt.n	8006cbc <__sflush_r+0xfc>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb8:	81a3      	strh	r3, [r4, #12]
 8006cba:	e78f      	b.n	8006bdc <__sflush_r+0x1c>
 8006cbc:	4407      	add	r7, r0
 8006cbe:	eba8 0800 	sub.w	r8, r8, r0
 8006cc2:	e7e9      	b.n	8006c98 <__sflush_r+0xd8>
 8006cc4:	dfbffffe 	.word	0xdfbffffe

08006cc8 <_fflush_r>:
 8006cc8:	b538      	push	{r3, r4, r5, lr}
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	4605      	mov	r5, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	b913      	cbnz	r3, 8006cd8 <_fflush_r+0x10>
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	b118      	cbz	r0, 8006ce2 <_fflush_r+0x1a>
 8006cda:	6a03      	ldr	r3, [r0, #32]
 8006cdc:	b90b      	cbnz	r3, 8006ce2 <_fflush_r+0x1a>
 8006cde:	f7ff fd2f 	bl	8006740 <__sinit>
 8006ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f3      	beq.n	8006cd2 <_fflush_r+0xa>
 8006cea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cec:	07d0      	lsls	r0, r2, #31
 8006cee:	d404      	bmi.n	8006cfa <_fflush_r+0x32>
 8006cf0:	0599      	lsls	r1, r3, #22
 8006cf2:	d402      	bmi.n	8006cfa <_fflush_r+0x32>
 8006cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf6:	f7ff fe42 	bl	800697e <__retarget_lock_acquire_recursive>
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	f7ff ff5f 	bl	8006bc0 <__sflush_r>
 8006d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d04:	4605      	mov	r5, r0
 8006d06:	07da      	lsls	r2, r3, #31
 8006d08:	d4e4      	bmi.n	8006cd4 <_fflush_r+0xc>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	059b      	lsls	r3, r3, #22
 8006d0e:	d4e1      	bmi.n	8006cd4 <_fflush_r+0xc>
 8006d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d12:	f7ff fe35 	bl	8006980 <__retarget_lock_release_recursive>
 8006d16:	e7dd      	b.n	8006cd4 <_fflush_r+0xc>

08006d18 <fiprintf>:
 8006d18:	b40e      	push	{r1, r2, r3}
 8006d1a:	b503      	push	{r0, r1, lr}
 8006d1c:	ab03      	add	r3, sp, #12
 8006d1e:	4601      	mov	r1, r0
 8006d20:	4805      	ldr	r0, [pc, #20]	; (8006d38 <fiprintf+0x20>)
 8006d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d26:	6800      	ldr	r0, [r0, #0]
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	f000 f847 	bl	8006dbc <_vfiprintf_r>
 8006d2e:	b002      	add	sp, #8
 8006d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d34:	b003      	add	sp, #12
 8006d36:	4770      	bx	lr
 8006d38:	20000068 	.word	0x20000068

08006d3c <_sbrk_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4d05      	ldr	r5, [pc, #20]	; (8006d58 <_sbrk_r+0x1c>)
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	f7fa fb0c 	bl	8001364 <_sbrk>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_sbrk_r+0x1a>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_sbrk_r+0x1a>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20000620 	.word	0x20000620

08006d5c <abort>:
 8006d5c:	2006      	movs	r0, #6
 8006d5e:	b508      	push	{r3, lr}
 8006d60:	f000 fb96 	bl	8007490 <raise>
 8006d64:	2001      	movs	r0, #1
 8006d66:	f7fa fa85 	bl	8001274 <_exit>

08006d6a <__sfputc_r>:
 8006d6a:	6893      	ldr	r3, [r2, #8]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	6093      	str	r3, [r2, #8]
 8006d72:	b410      	push	{r4}
 8006d74:	da08      	bge.n	8006d88 <__sfputc_r+0x1e>
 8006d76:	6994      	ldr	r4, [r2, #24]
 8006d78:	42a3      	cmp	r3, r4
 8006d7a:	db01      	blt.n	8006d80 <__sfputc_r+0x16>
 8006d7c:	290a      	cmp	r1, #10
 8006d7e:	d103      	bne.n	8006d88 <__sfputc_r+0x1e>
 8006d80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d84:	f000 bac6 	b.w	8007314 <__swbuf_r>
 8006d88:	6813      	ldr	r3, [r2, #0]
 8006d8a:	1c58      	adds	r0, r3, #1
 8006d8c:	6010      	str	r0, [r2, #0]
 8006d8e:	4608      	mov	r0, r1
 8006d90:	7019      	strb	r1, [r3, #0]
 8006d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <__sfputs_r>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	460f      	mov	r7, r1
 8006d9e:	4614      	mov	r4, r2
 8006da0:	18d5      	adds	r5, r2, r3
 8006da2:	42ac      	cmp	r4, r5
 8006da4:	d101      	bne.n	8006daa <__sfputs_r+0x12>
 8006da6:	2000      	movs	r0, #0
 8006da8:	e007      	b.n	8006dba <__sfputs_r+0x22>
 8006daa:	463a      	mov	r2, r7
 8006dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7ff ffda 	bl	8006d6a <__sfputc_r>
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d1f3      	bne.n	8006da2 <__sfputs_r+0xa>
 8006dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dbc <_vfiprintf_r>:
 8006dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	b09d      	sub	sp, #116	; 0x74
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	4698      	mov	r8, r3
 8006dc8:	4606      	mov	r6, r0
 8006dca:	b118      	cbz	r0, 8006dd4 <_vfiprintf_r+0x18>
 8006dcc:	6a03      	ldr	r3, [r0, #32]
 8006dce:	b90b      	cbnz	r3, 8006dd4 <_vfiprintf_r+0x18>
 8006dd0:	f7ff fcb6 	bl	8006740 <__sinit>
 8006dd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dd6:	07d9      	lsls	r1, r3, #31
 8006dd8:	d405      	bmi.n	8006de6 <_vfiprintf_r+0x2a>
 8006dda:	89ab      	ldrh	r3, [r5, #12]
 8006ddc:	059a      	lsls	r2, r3, #22
 8006dde:	d402      	bmi.n	8006de6 <_vfiprintf_r+0x2a>
 8006de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006de2:	f7ff fdcc 	bl	800697e <__retarget_lock_acquire_recursive>
 8006de6:	89ab      	ldrh	r3, [r5, #12]
 8006de8:	071b      	lsls	r3, r3, #28
 8006dea:	d501      	bpl.n	8006df0 <_vfiprintf_r+0x34>
 8006dec:	692b      	ldr	r3, [r5, #16]
 8006dee:	b99b      	cbnz	r3, 8006e18 <_vfiprintf_r+0x5c>
 8006df0:	4629      	mov	r1, r5
 8006df2:	4630      	mov	r0, r6
 8006df4:	f000 facc 	bl	8007390 <__swsetup_r>
 8006df8:	b170      	cbz	r0, 8006e18 <_vfiprintf_r+0x5c>
 8006dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dfc:	07dc      	lsls	r4, r3, #31
 8006dfe:	d504      	bpl.n	8006e0a <_vfiprintf_r+0x4e>
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	b01d      	add	sp, #116	; 0x74
 8006e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0a:	89ab      	ldrh	r3, [r5, #12]
 8006e0c:	0598      	lsls	r0, r3, #22
 8006e0e:	d4f7      	bmi.n	8006e00 <_vfiprintf_r+0x44>
 8006e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e12:	f7ff fdb5 	bl	8006980 <__retarget_lock_release_recursive>
 8006e16:	e7f3      	b.n	8006e00 <_vfiprintf_r+0x44>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e1e:	f04f 0901 	mov.w	r9, #1
 8006e22:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8006fdc <_vfiprintf_r+0x220>
 8006e26:	9309      	str	r3, [sp, #36]	; 0x24
 8006e28:	2320      	movs	r3, #32
 8006e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e2e:	2330      	movs	r3, #48	; 0x30
 8006e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e34:	4623      	mov	r3, r4
 8006e36:	469a      	mov	sl, r3
 8006e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e3c:	b10a      	cbz	r2, 8006e42 <_vfiprintf_r+0x86>
 8006e3e:	2a25      	cmp	r2, #37	; 0x25
 8006e40:	d1f9      	bne.n	8006e36 <_vfiprintf_r+0x7a>
 8006e42:	ebba 0b04 	subs.w	fp, sl, r4
 8006e46:	d00b      	beq.n	8006e60 <_vfiprintf_r+0xa4>
 8006e48:	465b      	mov	r3, fp
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7ff ffa2 	bl	8006d98 <__sfputs_r>
 8006e54:	3001      	adds	r0, #1
 8006e56:	f000 80a9 	beq.w	8006fac <_vfiprintf_r+0x1f0>
 8006e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e5c:	445a      	add	r2, fp
 8006e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e60:	f89a 3000 	ldrb.w	r3, [sl]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80a1 	beq.w	8006fac <_vfiprintf_r+0x1f0>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e70:	f10a 0a01 	add.w	sl, sl, #1
 8006e74:	9304      	str	r3, [sp, #16]
 8006e76:	9307      	str	r3, [sp, #28]
 8006e78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e7c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e82:	4654      	mov	r4, sl
 8006e84:	2205      	movs	r2, #5
 8006e86:	4855      	ldr	r0, [pc, #340]	; (8006fdc <_vfiprintf_r+0x220>)
 8006e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8c:	f000 fb1c 	bl	80074c8 <memchr>
 8006e90:	9a04      	ldr	r2, [sp, #16]
 8006e92:	b9d8      	cbnz	r0, 8006ecc <_vfiprintf_r+0x110>
 8006e94:	06d1      	lsls	r1, r2, #27
 8006e96:	bf44      	itt	mi
 8006e98:	2320      	movmi	r3, #32
 8006e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e9e:	0713      	lsls	r3, r2, #28
 8006ea0:	bf44      	itt	mi
 8006ea2:	232b      	movmi	r3, #43	; 0x2b
 8006ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8006eac:	2b2a      	cmp	r3, #42	; 0x2a
 8006eae:	d015      	beq.n	8006edc <_vfiprintf_r+0x120>
 8006eb0:	9a07      	ldr	r2, [sp, #28]
 8006eb2:	4654      	mov	r4, sl
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f04f 0c0a 	mov.w	ip, #10
 8006eba:	4621      	mov	r1, r4
 8006ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec0:	3b30      	subs	r3, #48	; 0x30
 8006ec2:	2b09      	cmp	r3, #9
 8006ec4:	d94d      	bls.n	8006f62 <_vfiprintf_r+0x1a6>
 8006ec6:	b1b0      	cbz	r0, 8006ef6 <_vfiprintf_r+0x13a>
 8006ec8:	9207      	str	r2, [sp, #28]
 8006eca:	e014      	b.n	8006ef6 <_vfiprintf_r+0x13a>
 8006ecc:	eba0 0308 	sub.w	r3, r0, r8
 8006ed0:	46a2      	mov	sl, r4
 8006ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	e7d2      	b.n	8006e82 <_vfiprintf_r+0xc6>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	1d19      	adds	r1, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	9103      	str	r1, [sp, #12]
 8006ee6:	bfbb      	ittet	lt
 8006ee8:	425b      	neglt	r3, r3
 8006eea:	f042 0202 	orrlt.w	r2, r2, #2
 8006eee:	9307      	strge	r3, [sp, #28]
 8006ef0:	9307      	strlt	r3, [sp, #28]
 8006ef2:	bfb8      	it	lt
 8006ef4:	9204      	strlt	r2, [sp, #16]
 8006ef6:	7823      	ldrb	r3, [r4, #0]
 8006ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8006efa:	d10c      	bne.n	8006f16 <_vfiprintf_r+0x15a>
 8006efc:	7863      	ldrb	r3, [r4, #1]
 8006efe:	2b2a      	cmp	r3, #42	; 0x2a
 8006f00:	d134      	bne.n	8006f6c <_vfiprintf_r+0x1b0>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	3402      	adds	r4, #2
 8006f06:	1d1a      	adds	r2, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	9203      	str	r2, [sp, #12]
 8006f0e:	bfb8      	it	lt
 8006f10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f14:	9305      	str	r3, [sp, #20]
 8006f16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006fec <_vfiprintf_r+0x230>
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	7821      	ldrb	r1, [r4, #0]
 8006f1e:	4650      	mov	r0, sl
 8006f20:	f000 fad2 	bl	80074c8 <memchr>
 8006f24:	b138      	cbz	r0, 8006f36 <_vfiprintf_r+0x17a>
 8006f26:	eba0 000a 	sub.w	r0, r0, sl
 8006f2a:	2240      	movs	r2, #64	; 0x40
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	3401      	adds	r4, #1
 8006f30:	4082      	lsls	r2, r0
 8006f32:	4313      	orrs	r3, r2
 8006f34:	9304      	str	r3, [sp, #16]
 8006f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f3a:	2206      	movs	r2, #6
 8006f3c:	4828      	ldr	r0, [pc, #160]	; (8006fe0 <_vfiprintf_r+0x224>)
 8006f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f42:	f000 fac1 	bl	80074c8 <memchr>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d03f      	beq.n	8006fca <_vfiprintf_r+0x20e>
 8006f4a:	4b26      	ldr	r3, [pc, #152]	; (8006fe4 <_vfiprintf_r+0x228>)
 8006f4c:	bb1b      	cbnz	r3, 8006f96 <_vfiprintf_r+0x1da>
 8006f4e:	9b03      	ldr	r3, [sp, #12]
 8006f50:	3307      	adds	r3, #7
 8006f52:	f023 0307 	bic.w	r3, r3, #7
 8006f56:	3308      	adds	r3, #8
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5c:	443b      	add	r3, r7
 8006f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f60:	e768      	b.n	8006e34 <_vfiprintf_r+0x78>
 8006f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f66:	460c      	mov	r4, r1
 8006f68:	2001      	movs	r0, #1
 8006f6a:	e7a6      	b.n	8006eba <_vfiprintf_r+0xfe>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	3401      	adds	r4, #1
 8006f70:	f04f 0c0a 	mov.w	ip, #10
 8006f74:	4619      	mov	r1, r3
 8006f76:	9305      	str	r3, [sp, #20]
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f7e:	3a30      	subs	r2, #48	; 0x30
 8006f80:	2a09      	cmp	r2, #9
 8006f82:	d903      	bls.n	8006f8c <_vfiprintf_r+0x1d0>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0c6      	beq.n	8006f16 <_vfiprintf_r+0x15a>
 8006f88:	9105      	str	r1, [sp, #20]
 8006f8a:	e7c4      	b.n	8006f16 <_vfiprintf_r+0x15a>
 8006f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f90:	4604      	mov	r4, r0
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7f0      	b.n	8006f78 <_vfiprintf_r+0x1bc>
 8006f96:	ab03      	add	r3, sp, #12
 8006f98:	462a      	mov	r2, r5
 8006f9a:	a904      	add	r1, sp, #16
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <_vfiprintf_r+0x22c>)
 8006fa2:	f3af 8000 	nop.w
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	1c78      	adds	r0, r7, #1
 8006faa:	d1d6      	bne.n	8006f5a <_vfiprintf_r+0x19e>
 8006fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fae:	07d9      	lsls	r1, r3, #31
 8006fb0:	d405      	bmi.n	8006fbe <_vfiprintf_r+0x202>
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	059a      	lsls	r2, r3, #22
 8006fb6:	d402      	bmi.n	8006fbe <_vfiprintf_r+0x202>
 8006fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fba:	f7ff fce1 	bl	8006980 <__retarget_lock_release_recursive>
 8006fbe:	89ab      	ldrh	r3, [r5, #12]
 8006fc0:	065b      	lsls	r3, r3, #25
 8006fc2:	f53f af1d 	bmi.w	8006e00 <_vfiprintf_r+0x44>
 8006fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fc8:	e71c      	b.n	8006e04 <_vfiprintf_r+0x48>
 8006fca:	ab03      	add	r3, sp, #12
 8006fcc:	462a      	mov	r2, r5
 8006fce:	a904      	add	r1, sp, #16
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <_vfiprintf_r+0x22c>)
 8006fd6:	f000 f87d 	bl	80070d4 <_printf_i>
 8006fda:	e7e4      	b.n	8006fa6 <_vfiprintf_r+0x1ea>
 8006fdc:	0800773f 	.word	0x0800773f
 8006fe0:	08007749 	.word	0x08007749
 8006fe4:	00000000 	.word	0x00000000
 8006fe8:	08006d99 	.word	0x08006d99
 8006fec:	08007745 	.word	0x08007745

08006ff0 <_printf_common>:
 8006ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	4699      	mov	r9, r3
 8006ff8:	688a      	ldr	r2, [r1, #8]
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	690b      	ldr	r3, [r1, #16]
 8006ffe:	460c      	mov	r4, r1
 8007000:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007004:	4293      	cmp	r3, r2
 8007006:	bfb8      	it	lt
 8007008:	4613      	movlt	r3, r2
 800700a:	6033      	str	r3, [r6, #0]
 800700c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007010:	b10a      	cbz	r2, 8007016 <_printf_common+0x26>
 8007012:	3301      	adds	r3, #1
 8007014:	6033      	str	r3, [r6, #0]
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	0699      	lsls	r1, r3, #26
 800701a:	bf42      	ittt	mi
 800701c:	6833      	ldrmi	r3, [r6, #0]
 800701e:	3302      	addmi	r3, #2
 8007020:	6033      	strmi	r3, [r6, #0]
 8007022:	6825      	ldr	r5, [r4, #0]
 8007024:	f015 0506 	ands.w	r5, r5, #6
 8007028:	d106      	bne.n	8007038 <_printf_common+0x48>
 800702a:	f104 0a19 	add.w	sl, r4, #25
 800702e:	68e3      	ldr	r3, [r4, #12]
 8007030:	6832      	ldr	r2, [r6, #0]
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	42ab      	cmp	r3, r5
 8007036:	dc2b      	bgt.n	8007090 <_printf_common+0xa0>
 8007038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800703c:	1e13      	subs	r3, r2, #0
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	bf18      	it	ne
 8007042:	2301      	movne	r3, #1
 8007044:	0692      	lsls	r2, r2, #26
 8007046:	d430      	bmi.n	80070aa <_printf_common+0xba>
 8007048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800704c:	4649      	mov	r1, r9
 800704e:	4638      	mov	r0, r7
 8007050:	47c0      	blx	r8
 8007052:	3001      	adds	r0, #1
 8007054:	d023      	beq.n	800709e <_printf_common+0xae>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	341a      	adds	r4, #26
 800705a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800705e:	f003 0306 	and.w	r3, r3, #6
 8007062:	2b04      	cmp	r3, #4
 8007064:	bf0a      	itet	eq
 8007066:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800706a:	2500      	movne	r5, #0
 800706c:	6833      	ldreq	r3, [r6, #0]
 800706e:	f04f 0600 	mov.w	r6, #0
 8007072:	bf08      	it	eq
 8007074:	1aed      	subeq	r5, r5, r3
 8007076:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800707a:	bf08      	it	eq
 800707c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007080:	4293      	cmp	r3, r2
 8007082:	bfc4      	itt	gt
 8007084:	1a9b      	subgt	r3, r3, r2
 8007086:	18ed      	addgt	r5, r5, r3
 8007088:	42b5      	cmp	r5, r6
 800708a:	d11a      	bne.n	80070c2 <_printf_common+0xd2>
 800708c:	2000      	movs	r0, #0
 800708e:	e008      	b.n	80070a2 <_printf_common+0xb2>
 8007090:	2301      	movs	r3, #1
 8007092:	4652      	mov	r2, sl
 8007094:	4649      	mov	r1, r9
 8007096:	4638      	mov	r0, r7
 8007098:	47c0      	blx	r8
 800709a:	3001      	adds	r0, #1
 800709c:	d103      	bne.n	80070a6 <_printf_common+0xb6>
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a6:	3501      	adds	r5, #1
 80070a8:	e7c1      	b.n	800702e <_printf_common+0x3e>
 80070aa:	18e1      	adds	r1, r4, r3
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	2030      	movs	r0, #48	; 0x30
 80070b0:	3302      	adds	r3, #2
 80070b2:	4422      	add	r2, r4
 80070b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070c0:	e7c2      	b.n	8007048 <_printf_common+0x58>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4622      	mov	r2, r4
 80070c6:	4649      	mov	r1, r9
 80070c8:	4638      	mov	r0, r7
 80070ca:	47c0      	blx	r8
 80070cc:	3001      	adds	r0, #1
 80070ce:	d0e6      	beq.n	800709e <_printf_common+0xae>
 80070d0:	3601      	adds	r6, #1
 80070d2:	e7d9      	b.n	8007088 <_printf_common+0x98>

080070d4 <_printf_i>:
 80070d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	7e0f      	ldrb	r7, [r1, #24]
 80070da:	4691      	mov	r9, r2
 80070dc:	4680      	mov	r8, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	2f78      	cmp	r7, #120	; 0x78
 80070e2:	469a      	mov	sl, r3
 80070e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070ea:	d807      	bhi.n	80070fc <_printf_i+0x28>
 80070ec:	2f62      	cmp	r7, #98	; 0x62
 80070ee:	d80a      	bhi.n	8007106 <_printf_i+0x32>
 80070f0:	2f00      	cmp	r7, #0
 80070f2:	f000 80d3 	beq.w	800729c <_printf_i+0x1c8>
 80070f6:	2f58      	cmp	r7, #88	; 0x58
 80070f8:	f000 80bf 	beq.w	800727a <_printf_i+0x1a6>
 80070fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007104:	e03a      	b.n	800717c <_printf_i+0xa8>
 8007106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800710a:	2b15      	cmp	r3, #21
 800710c:	d8f6      	bhi.n	80070fc <_printf_i+0x28>
 800710e:	a101      	add	r1, pc, #4	; (adr r1, 8007114 <_printf_i+0x40>)
 8007110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007114:	0800716d 	.word	0x0800716d
 8007118:	08007181 	.word	0x08007181
 800711c:	080070fd 	.word	0x080070fd
 8007120:	080070fd 	.word	0x080070fd
 8007124:	080070fd 	.word	0x080070fd
 8007128:	080070fd 	.word	0x080070fd
 800712c:	08007181 	.word	0x08007181
 8007130:	080070fd 	.word	0x080070fd
 8007134:	080070fd 	.word	0x080070fd
 8007138:	080070fd 	.word	0x080070fd
 800713c:	080070fd 	.word	0x080070fd
 8007140:	08007283 	.word	0x08007283
 8007144:	080071ad 	.word	0x080071ad
 8007148:	0800723f 	.word	0x0800723f
 800714c:	080070fd 	.word	0x080070fd
 8007150:	080070fd 	.word	0x080070fd
 8007154:	080072a5 	.word	0x080072a5
 8007158:	080070fd 	.word	0x080070fd
 800715c:	080071ad 	.word	0x080071ad
 8007160:	080070fd 	.word	0x080070fd
 8007164:	080070fd 	.word	0x080070fd
 8007168:	08007247 	.word	0x08007247
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	602a      	str	r2, [r5, #0]
 8007174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800717c:	2301      	movs	r3, #1
 800717e:	e09e      	b.n	80072be <_printf_i+0x1ea>
 8007180:	6820      	ldr	r0, [r4, #0]
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	0607      	lsls	r7, r0, #24
 8007186:	f103 0104 	add.w	r1, r3, #4
 800718a:	6029      	str	r1, [r5, #0]
 800718c:	d501      	bpl.n	8007192 <_printf_i+0xbe>
 800718e:	681e      	ldr	r6, [r3, #0]
 8007190:	e003      	b.n	800719a <_printf_i+0xc6>
 8007192:	0646      	lsls	r6, r0, #25
 8007194:	d5fb      	bpl.n	800718e <_printf_i+0xba>
 8007196:	f9b3 6000 	ldrsh.w	r6, [r3]
 800719a:	2e00      	cmp	r6, #0
 800719c:	da03      	bge.n	80071a6 <_printf_i+0xd2>
 800719e:	232d      	movs	r3, #45	; 0x2d
 80071a0:	4276      	negs	r6, r6
 80071a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a6:	4859      	ldr	r0, [pc, #356]	; (800730c <_printf_i+0x238>)
 80071a8:	230a      	movs	r3, #10
 80071aa:	e012      	b.n	80071d2 <_printf_i+0xfe>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	6820      	ldr	r0, [r4, #0]
 80071b0:	1d19      	adds	r1, r3, #4
 80071b2:	6029      	str	r1, [r5, #0]
 80071b4:	0605      	lsls	r5, r0, #24
 80071b6:	d501      	bpl.n	80071bc <_printf_i+0xe8>
 80071b8:	681e      	ldr	r6, [r3, #0]
 80071ba:	e002      	b.n	80071c2 <_printf_i+0xee>
 80071bc:	0641      	lsls	r1, r0, #25
 80071be:	d5fb      	bpl.n	80071b8 <_printf_i+0xe4>
 80071c0:	881e      	ldrh	r6, [r3, #0]
 80071c2:	2f6f      	cmp	r7, #111	; 0x6f
 80071c4:	4851      	ldr	r0, [pc, #324]	; (800730c <_printf_i+0x238>)
 80071c6:	bf0c      	ite	eq
 80071c8:	2308      	moveq	r3, #8
 80071ca:	230a      	movne	r3, #10
 80071cc:	2100      	movs	r1, #0
 80071ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071d2:	6865      	ldr	r5, [r4, #4]
 80071d4:	2d00      	cmp	r5, #0
 80071d6:	60a5      	str	r5, [r4, #8]
 80071d8:	bfa2      	ittt	ge
 80071da:	6821      	ldrge	r1, [r4, #0]
 80071dc:	f021 0104 	bicge.w	r1, r1, #4
 80071e0:	6021      	strge	r1, [r4, #0]
 80071e2:	b90e      	cbnz	r6, 80071e8 <_printf_i+0x114>
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	d04a      	beq.n	800727e <_printf_i+0x1aa>
 80071e8:	4615      	mov	r5, r2
 80071ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80071ee:	fb03 6711 	mls	r7, r3, r1, r6
 80071f2:	5dc7      	ldrb	r7, [r0, r7]
 80071f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071f8:	4637      	mov	r7, r6
 80071fa:	460e      	mov	r6, r1
 80071fc:	42bb      	cmp	r3, r7
 80071fe:	d9f4      	bls.n	80071ea <_printf_i+0x116>
 8007200:	2b08      	cmp	r3, #8
 8007202:	d10b      	bne.n	800721c <_printf_i+0x148>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	07de      	lsls	r6, r3, #31
 8007208:	d508      	bpl.n	800721c <_printf_i+0x148>
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	6861      	ldr	r1, [r4, #4]
 800720e:	4299      	cmp	r1, r3
 8007210:	bfde      	ittt	le
 8007212:	2330      	movle	r3, #48	; 0x30
 8007214:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007218:	f105 35ff 	addle.w	r5, r5, #4294967295
 800721c:	1b52      	subs	r2, r2, r5
 800721e:	6122      	str	r2, [r4, #16]
 8007220:	464b      	mov	r3, r9
 8007222:	aa03      	add	r2, sp, #12
 8007224:	4621      	mov	r1, r4
 8007226:	4640      	mov	r0, r8
 8007228:	f8cd a000 	str.w	sl, [sp]
 800722c:	f7ff fee0 	bl	8006ff0 <_printf_common>
 8007230:	3001      	adds	r0, #1
 8007232:	d149      	bne.n	80072c8 <_printf_i+0x1f4>
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	b004      	add	sp, #16
 800723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	f043 0320 	orr.w	r3, r3, #32
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	2778      	movs	r7, #120	; 0x78
 8007248:	4831      	ldr	r0, [pc, #196]	; (8007310 <_printf_i+0x23c>)
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007250:	061f      	lsls	r7, r3, #24
 8007252:	6829      	ldr	r1, [r5, #0]
 8007254:	f851 6b04 	ldr.w	r6, [r1], #4
 8007258:	d402      	bmi.n	8007260 <_printf_i+0x18c>
 800725a:	065f      	lsls	r7, r3, #25
 800725c:	bf48      	it	mi
 800725e:	b2b6      	uxthmi	r6, r6
 8007260:	07df      	lsls	r7, r3, #31
 8007262:	6029      	str	r1, [r5, #0]
 8007264:	bf44      	itt	mi
 8007266:	f043 0320 	orrmi.w	r3, r3, #32
 800726a:	6023      	strmi	r3, [r4, #0]
 800726c:	b91e      	cbnz	r6, 8007276 <_printf_i+0x1a2>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	f023 0320 	bic.w	r3, r3, #32
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	2310      	movs	r3, #16
 8007278:	e7a8      	b.n	80071cc <_printf_i+0xf8>
 800727a:	4824      	ldr	r0, [pc, #144]	; (800730c <_printf_i+0x238>)
 800727c:	e7e5      	b.n	800724a <_printf_i+0x176>
 800727e:	4615      	mov	r5, r2
 8007280:	e7be      	b.n	8007200 <_printf_i+0x12c>
 8007282:	682b      	ldr	r3, [r5, #0]
 8007284:	6826      	ldr	r6, [r4, #0]
 8007286:	1d18      	adds	r0, r3, #4
 8007288:	6961      	ldr	r1, [r4, #20]
 800728a:	6028      	str	r0, [r5, #0]
 800728c:	0635      	lsls	r5, r6, #24
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	d501      	bpl.n	8007296 <_printf_i+0x1c2>
 8007292:	6019      	str	r1, [r3, #0]
 8007294:	e002      	b.n	800729c <_printf_i+0x1c8>
 8007296:	0670      	lsls	r0, r6, #25
 8007298:	d5fb      	bpl.n	8007292 <_printf_i+0x1be>
 800729a:	8019      	strh	r1, [r3, #0]
 800729c:	2300      	movs	r3, #0
 800729e:	4615      	mov	r5, r2
 80072a0:	6123      	str	r3, [r4, #16]
 80072a2:	e7bd      	b.n	8007220 <_printf_i+0x14c>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	2100      	movs	r1, #0
 80072a8:	1d1a      	adds	r2, r3, #4
 80072aa:	602a      	str	r2, [r5, #0]
 80072ac:	681d      	ldr	r5, [r3, #0]
 80072ae:	6862      	ldr	r2, [r4, #4]
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 f909 	bl	80074c8 <memchr>
 80072b6:	b108      	cbz	r0, 80072bc <_printf_i+0x1e8>
 80072b8:	1b40      	subs	r0, r0, r5
 80072ba:	6060      	str	r0, [r4, #4]
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	2300      	movs	r3, #0
 80072c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072c6:	e7ab      	b.n	8007220 <_printf_i+0x14c>
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	462a      	mov	r2, r5
 80072cc:	4649      	mov	r1, r9
 80072ce:	4640      	mov	r0, r8
 80072d0:	47d0      	blx	sl
 80072d2:	3001      	adds	r0, #1
 80072d4:	d0ae      	beq.n	8007234 <_printf_i+0x160>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	079b      	lsls	r3, r3, #30
 80072da:	d413      	bmi.n	8007304 <_printf_i+0x230>
 80072dc:	68e0      	ldr	r0, [r4, #12]
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	4298      	cmp	r0, r3
 80072e2:	bfb8      	it	lt
 80072e4:	4618      	movlt	r0, r3
 80072e6:	e7a7      	b.n	8007238 <_printf_i+0x164>
 80072e8:	2301      	movs	r3, #1
 80072ea:	4632      	mov	r2, r6
 80072ec:	4649      	mov	r1, r9
 80072ee:	4640      	mov	r0, r8
 80072f0:	47d0      	blx	sl
 80072f2:	3001      	adds	r0, #1
 80072f4:	d09e      	beq.n	8007234 <_printf_i+0x160>
 80072f6:	3501      	adds	r5, #1
 80072f8:	68e3      	ldr	r3, [r4, #12]
 80072fa:	9903      	ldr	r1, [sp, #12]
 80072fc:	1a5b      	subs	r3, r3, r1
 80072fe:	42ab      	cmp	r3, r5
 8007300:	dcf2      	bgt.n	80072e8 <_printf_i+0x214>
 8007302:	e7eb      	b.n	80072dc <_printf_i+0x208>
 8007304:	2500      	movs	r5, #0
 8007306:	f104 0619 	add.w	r6, r4, #25
 800730a:	e7f5      	b.n	80072f8 <_printf_i+0x224>
 800730c:	08007750 	.word	0x08007750
 8007310:	08007761 	.word	0x08007761

08007314 <__swbuf_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	460e      	mov	r6, r1
 8007318:	4614      	mov	r4, r2
 800731a:	4605      	mov	r5, r0
 800731c:	b118      	cbz	r0, 8007326 <__swbuf_r+0x12>
 800731e:	6a03      	ldr	r3, [r0, #32]
 8007320:	b90b      	cbnz	r3, 8007326 <__swbuf_r+0x12>
 8007322:	f7ff fa0d 	bl	8006740 <__sinit>
 8007326:	69a3      	ldr	r3, [r4, #24]
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	071a      	lsls	r2, r3, #28
 800732e:	d525      	bpl.n	800737c <__swbuf_r+0x68>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	b31b      	cbz	r3, 800737c <__swbuf_r+0x68>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	b2f6      	uxtb	r6, r6
 8007338:	6922      	ldr	r2, [r4, #16]
 800733a:	4637      	mov	r7, r6
 800733c:	1a98      	subs	r0, r3, r2
 800733e:	6963      	ldr	r3, [r4, #20]
 8007340:	4283      	cmp	r3, r0
 8007342:	dc04      	bgt.n	800734e <__swbuf_r+0x3a>
 8007344:	4621      	mov	r1, r4
 8007346:	4628      	mov	r0, r5
 8007348:	f7ff fcbe 	bl	8006cc8 <_fflush_r>
 800734c:	b9e0      	cbnz	r0, 8007388 <__swbuf_r+0x74>
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	3b01      	subs	r3, #1
 8007352:	60a3      	str	r3, [r4, #8]
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	6022      	str	r2, [r4, #0]
 800735a:	701e      	strb	r6, [r3, #0]
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	6962      	ldr	r2, [r4, #20]
 8007360:	429a      	cmp	r2, r3
 8007362:	d004      	beq.n	800736e <__swbuf_r+0x5a>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	07db      	lsls	r3, r3, #31
 8007368:	d506      	bpl.n	8007378 <__swbuf_r+0x64>
 800736a:	2e0a      	cmp	r6, #10
 800736c:	d104      	bne.n	8007378 <__swbuf_r+0x64>
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f7ff fca9 	bl	8006cc8 <_fflush_r>
 8007376:	b938      	cbnz	r0, 8007388 <__swbuf_r+0x74>
 8007378:	4638      	mov	r0, r7
 800737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800737c:	4621      	mov	r1, r4
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f806 	bl	8007390 <__swsetup_r>
 8007384:	2800      	cmp	r0, #0
 8007386:	d0d5      	beq.n	8007334 <__swbuf_r+0x20>
 8007388:	f04f 37ff 	mov.w	r7, #4294967295
 800738c:	e7f4      	b.n	8007378 <__swbuf_r+0x64>
	...

08007390 <__swsetup_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4b2a      	ldr	r3, [pc, #168]	; (800743c <__swsetup_r+0xac>)
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	b118      	cbz	r0, 80073a4 <__swsetup_r+0x14>
 800739c:	6a03      	ldr	r3, [r0, #32]
 800739e:	b90b      	cbnz	r3, 80073a4 <__swsetup_r+0x14>
 80073a0:	f7ff f9ce 	bl	8006740 <__sinit>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073aa:	0718      	lsls	r0, r3, #28
 80073ac:	d422      	bmi.n	80073f4 <__swsetup_r+0x64>
 80073ae:	06d9      	lsls	r1, r3, #27
 80073b0:	d407      	bmi.n	80073c2 <__swsetup_r+0x32>
 80073b2:	2309      	movs	r3, #9
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	e034      	b.n	800742c <__swsetup_r+0x9c>
 80073c2:	0758      	lsls	r0, r3, #29
 80073c4:	d512      	bpl.n	80073ec <__swsetup_r+0x5c>
 80073c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073c8:	b141      	cbz	r1, 80073dc <__swsetup_r+0x4c>
 80073ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ce:	4299      	cmp	r1, r3
 80073d0:	d002      	beq.n	80073d8 <__swsetup_r+0x48>
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7ff faf4 	bl	80069c0 <_free_r>
 80073d8:	2300      	movs	r3, #0
 80073da:	6363      	str	r3, [r4, #52]	; 0x34
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	2300      	movs	r3, #0
 80073e6:	6063      	str	r3, [r4, #4]
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f043 0308 	orr.w	r3, r3, #8
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	b94b      	cbnz	r3, 800740c <__swsetup_r+0x7c>
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007402:	d003      	beq.n	800740c <__swsetup_r+0x7c>
 8007404:	4621      	mov	r1, r4
 8007406:	4628      	mov	r0, r5
 8007408:	f000 f891 	bl	800752e <__smakebuf_r>
 800740c:	89a0      	ldrh	r0, [r4, #12]
 800740e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007412:	f010 0301 	ands.w	r3, r0, #1
 8007416:	d00a      	beq.n	800742e <__swsetup_r+0x9e>
 8007418:	2300      	movs	r3, #0
 800741a:	60a3      	str	r3, [r4, #8]
 800741c:	6963      	ldr	r3, [r4, #20]
 800741e:	425b      	negs	r3, r3
 8007420:	61a3      	str	r3, [r4, #24]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	b943      	cbnz	r3, 8007438 <__swsetup_r+0xa8>
 8007426:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800742a:	d1c4      	bne.n	80073b6 <__swsetup_r+0x26>
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	0781      	lsls	r1, r0, #30
 8007430:	bf58      	it	pl
 8007432:	6963      	ldrpl	r3, [r4, #20]
 8007434:	60a3      	str	r3, [r4, #8]
 8007436:	e7f4      	b.n	8007422 <__swsetup_r+0x92>
 8007438:	2000      	movs	r0, #0
 800743a:	e7f7      	b.n	800742c <__swsetup_r+0x9c>
 800743c:	20000068 	.word	0x20000068

08007440 <_raise_r>:
 8007440:	291f      	cmp	r1, #31
 8007442:	b538      	push	{r3, r4, r5, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	460d      	mov	r5, r1
 8007448:	d904      	bls.n	8007454 <_raise_r+0x14>
 800744a:	2316      	movs	r3, #22
 800744c:	6003      	str	r3, [r0, #0]
 800744e:	f04f 30ff 	mov.w	r0, #4294967295
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007456:	b112      	cbz	r2, 800745e <_raise_r+0x1e>
 8007458:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800745c:	b94b      	cbnz	r3, 8007472 <_raise_r+0x32>
 800745e:	4620      	mov	r0, r4
 8007460:	f000 f830 	bl	80074c4 <_getpid_r>
 8007464:	462a      	mov	r2, r5
 8007466:	4601      	mov	r1, r0
 8007468:	4620      	mov	r0, r4
 800746a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746e:	f000 b817 	b.w	80074a0 <_kill_r>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d00a      	beq.n	800748c <_raise_r+0x4c>
 8007476:	1c59      	adds	r1, r3, #1
 8007478:	d103      	bne.n	8007482 <_raise_r+0x42>
 800747a:	2316      	movs	r3, #22
 800747c:	6003      	str	r3, [r0, #0]
 800747e:	2001      	movs	r0, #1
 8007480:	e7e7      	b.n	8007452 <_raise_r+0x12>
 8007482:	2400      	movs	r4, #0
 8007484:	4628      	mov	r0, r5
 8007486:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800748a:	4798      	blx	r3
 800748c:	2000      	movs	r0, #0
 800748e:	e7e0      	b.n	8007452 <_raise_r+0x12>

08007490 <raise>:
 8007490:	4b02      	ldr	r3, [pc, #8]	; (800749c <raise+0xc>)
 8007492:	4601      	mov	r1, r0
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f7ff bfd3 	b.w	8007440 <_raise_r>
 800749a:	bf00      	nop
 800749c:	20000068 	.word	0x20000068

080074a0 <_kill_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	2300      	movs	r3, #0
 80074a4:	4d06      	ldr	r5, [pc, #24]	; (80074c0 <_kill_r+0x20>)
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	f7f9 fed1 	bl	8001254 <_kill>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d102      	bne.n	80074bc <_kill_r+0x1c>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	b103      	cbz	r3, 80074bc <_kill_r+0x1c>
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	20000620 	.word	0x20000620

080074c4 <_getpid_r>:
 80074c4:	f7f9 bebe 	b.w	8001244 <_getpid>

080074c8 <memchr>:
 80074c8:	b2c9      	uxtb	r1, r1
 80074ca:	4402      	add	r2, r0
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4290      	cmp	r0, r2
 80074d0:	4603      	mov	r3, r0
 80074d2:	d101      	bne.n	80074d8 <memchr+0x10>
 80074d4:	2300      	movs	r3, #0
 80074d6:	e003      	b.n	80074e0 <memchr+0x18>
 80074d8:	781c      	ldrb	r4, [r3, #0]
 80074da:	3001      	adds	r0, #1
 80074dc:	428c      	cmp	r4, r1
 80074de:	d1f6      	bne.n	80074ce <memchr+0x6>
 80074e0:	4618      	mov	r0, r3
 80074e2:	bd10      	pop	{r4, pc}

080074e4 <__swhatbuf_r>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	460c      	mov	r4, r1
 80074e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ec:	b096      	sub	sp, #88	; 0x58
 80074ee:	4615      	mov	r5, r2
 80074f0:	2900      	cmp	r1, #0
 80074f2:	461e      	mov	r6, r3
 80074f4:	da0c      	bge.n	8007510 <__swhatbuf_r+0x2c>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	2100      	movs	r1, #0
 80074fa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074fe:	bf0c      	ite	eq
 8007500:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007504:	2340      	movne	r3, #64	; 0x40
 8007506:	2000      	movs	r0, #0
 8007508:	6031      	str	r1, [r6, #0]
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	b016      	add	sp, #88	; 0x58
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	466a      	mov	r2, sp
 8007512:	f000 f849 	bl	80075a8 <_fstat_r>
 8007516:	2800      	cmp	r0, #0
 8007518:	dbed      	blt.n	80074f6 <__swhatbuf_r+0x12>
 800751a:	9901      	ldr	r1, [sp, #4]
 800751c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007520:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007524:	4259      	negs	r1, r3
 8007526:	4159      	adcs	r1, r3
 8007528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800752c:	e7eb      	b.n	8007506 <__swhatbuf_r+0x22>

0800752e <__smakebuf_r>:
 800752e:	898b      	ldrh	r3, [r1, #12]
 8007530:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007532:	079d      	lsls	r5, r3, #30
 8007534:	4606      	mov	r6, r0
 8007536:	460c      	mov	r4, r1
 8007538:	d507      	bpl.n	800754a <__smakebuf_r+0x1c>
 800753a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	2301      	movs	r3, #1
 8007544:	6163      	str	r3, [r4, #20]
 8007546:	b002      	add	sp, #8
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	ab01      	add	r3, sp, #4
 800754c:	466a      	mov	r2, sp
 800754e:	f7ff ffc9 	bl	80074e4 <__swhatbuf_r>
 8007552:	9900      	ldr	r1, [sp, #0]
 8007554:	4605      	mov	r5, r0
 8007556:	4630      	mov	r0, r6
 8007558:	f7ff faa6 	bl	8006aa8 <_malloc_r>
 800755c:	b948      	cbnz	r0, 8007572 <__smakebuf_r+0x44>
 800755e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007562:	059a      	lsls	r2, r3, #22
 8007564:	d4ef      	bmi.n	8007546 <__smakebuf_r+0x18>
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	f043 0302 	orr.w	r3, r3, #2
 800756e:	81a3      	strh	r3, [r4, #12]
 8007570:	e7e3      	b.n	800753a <__smakebuf_r+0xc>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	6020      	str	r0, [r4, #0]
 8007576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757a:	6120      	str	r0, [r4, #16]
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	6163      	str	r3, [r4, #20]
 8007582:	9b01      	ldr	r3, [sp, #4]
 8007584:	b15b      	cbz	r3, 800759e <__smakebuf_r+0x70>
 8007586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800758a:	4630      	mov	r0, r6
 800758c:	f000 f81e 	bl	80075cc <_isatty_r>
 8007590:	b128      	cbz	r0, 800759e <__smakebuf_r+0x70>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f023 0303 	bic.w	r3, r3, #3
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	431d      	orrs	r5, r3
 80075a2:	81a5      	strh	r5, [r4, #12]
 80075a4:	e7cf      	b.n	8007546 <__smakebuf_r+0x18>
	...

080075a8 <_fstat_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	2300      	movs	r3, #0
 80075ac:	4d06      	ldr	r5, [pc, #24]	; (80075c8 <_fstat_r+0x20>)
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	f7f9 feac 	bl	8001312 <_fstat>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	d102      	bne.n	80075c4 <_fstat_r+0x1c>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	b103      	cbz	r3, 80075c4 <_fstat_r+0x1c>
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	bf00      	nop
 80075c8:	20000620 	.word	0x20000620

080075cc <_isatty_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	2300      	movs	r3, #0
 80075d0:	4d05      	ldr	r5, [pc, #20]	; (80075e8 <_isatty_r+0x1c>)
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	f7f9 feab 	bl	8001332 <_isatty>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_isatty_r+0x1a>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_isatty_r+0x1a>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	20000620 	.word	0x20000620

080075ec <_gettimeofday>:
 80075ec:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <_gettimeofday+0xc>)
 80075ee:	2258      	movs	r2, #88	; 0x58
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	4770      	bx	lr
 80075f8:	20000620 	.word	0x20000620

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr
